#GUI APPS

# import GuiAPPs as guiApps
# guiApps.guiAppShow()
# guiApps.guiBallMovePlay()
# guiApps.guiCalcShow()
# guiApps.guiColorsShow()
# guiApps.GuiCOMMISSIONshow()
# guiApps.GuiCOOLdesignShow()
# guiApps.guiDateShow()
# guiApps.guiDateShow()
# guiApps.guiPhotoGalleryShow() # "z-IMAGES_1\0.cool\"
# guiApps.HTMLlikeDesignShow()
# guiApps.GuiMACLauncherShow()
# guiApps.GuiSplashSCREENshow()
# guiApps.GuiTIMERshow()
# guiApps.GuiWEATHERshow()
# import GuiAPPs as guiApps
# GuiWindowLAYOUTSshow() #cycles thru them as you close them
# guiApps.GuiWithImageBUTTONSshow()



# v1
# import GuiAPPs as guiApps
# guiApps.guiAppShow()

# you can change settings - with the right click menu
# you can save the location for next time you open it

def guiAppShow():
    import PySimpleGUI as sg

    """
        Demo - A simple minimal window with a material design feel

        Contains base64 images for:
        * The PSG Yellow Graphic
        * The 2 toggle buttons
        * The large spinning animation

        Copyright 2021 PySimpleGUI
    """

    def main():
        sg.theme('light grey')
        BLUE_BUTTON_COLOR = '#FFFFFF on #2196f2'
        GREEN_BUTTON_COLOR = '#FFFFFF on #00c851'
        LIGHT_GRAY_BUTTON_COLOR = f'#212021 on #e0e0e0'
        DARK_GRAY_BUTTON_COLOR = '#e0e0e0 on #212021'

        layout = [[sg.Col([[sg.T('Welcome to my App')],
                           [sg.T('Your license status: '), sg.T('Trial', k='-LIC STATUS-')],
                           [sg.B('Light', size=(10, 2), button_color=LIGHT_GRAY_BUTTON_COLOR),
                            sg.B('Dark', size=(10, 2), button_color=DARK_GRAY_BUTTON_COLOR)],
                           [sg.T()],
                           [sg.Image(data=PSG_GRAPHIC)],
                           [sg.B(image_data=T_OFF, k='-TOGGLE1-', metadata=False,
                                 button_color=sg.theme_background_color()),
                            sg.B(image_data=T_ON, k='-TOGGLE2-', button_color=sg.theme_background_color(),
                                 metadata=True)],
                           [sg.T()],
                           [sg.B('Do Something', size=(14, 2), button_color=BLUE_BUTTON_COLOR),
                            sg.B('Upgrade', size=(14, 2), button_color=GREEN_BUTTON_COLOR),
                            sg.B('Exit', size=(14, 2), button_color=LIGHT_GRAY_BUTTON_COLOR)],
                           [sg.Image(data=BLANK, k='-GIF-', metadata=0)],
                           [sg.T('The end of "my App"')]], element_justification='c', k='-TOP COL-')]]

        window = sg.Window('Window Title', layout)
        show_animation = False

        while True:  # Event Loop
            event, values = window.read(timeout=100)
            if event == sg.WIN_CLOSED or event == 'Exit':
                break
            if event.startswith('-TOGGLE'):
                state = window[event].metadata = not window[event].metadata
                window[event].update(image_data=T_ON if state else T_OFF)
            elif event == 'Do Something':
                show_animation = True
                window['-GIF-'].metadata = 0
            elif event == 'Upgrade':
                sg.popup_no_titlebar('This is where you would do', 'the updagrade window code',
                                     background_color='black',
                                     text_color='white')
            # Do the animation stuff
            if show_animation:
                window['-GIF-'].update_animation(LOADING_GIF, time_between_frames=100)
                window['-GIF-'].metadata += 1
                if window['-GIF-'].metadata > 50:
                    show_animation = False
                    window['-GIF-'].update(data=BLANK)

        window.close()

    #if __name__ == '__main__':
    BLANK = b'iVBORw0KGgoAAAANSUhEUgAAAKAAAACgCAYAAACLz2ctAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB7SURBVHhe7cExAQAAAMKg9U9tDQ8gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADtQAkK8AAT0JXwIAAAAASUVORK5CYII='
    T_OFF = b'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'
    T_ON = b'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'
    PSG_GRAPHIC = b'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'
    LOADING_GIF = b''
    main()


# v1
# import GuiAPPs as apps
# apps.guiBallMovePlay()

def guiBallMovePlay():
    # Importing arcade module
    import arcade

    # Creating MainGame class
    class MainGame(arcade.Window):
        def __init__(self):
            super().__init__(600, 600, title="Player Movement")

            # Initializing the initial x and y coordinated
            self.x = 250
            self.y = 250

            # Initializing a variable to store
            # the velocity of the player
            self.vel_x = 0
            self.vel_y = 0

        # Creating on_draw() function to draw on the screen
        def on_draw(self):
            arcade.start_render()

            # Drawing the rectangle using
            # draw_rectangle_filled function
            arcade.draw_circle_filled(self.x, self.y, 25,
                                      arcade.color.GREEN)

        # Creating on_update function to
        # update the x coordinate
        def on_update(self, delta_time):
            self.x += self.vel_x * delta_time
            self.y += self.vel_y * delta_time

        # Creating function to change the velocity
        # when button is pressed
        def on_key_press(self, symbol, modifier):

            # Checking the button pressed
            # and changing the value of velocity
            if symbol == arcade.key.UP:
                self.vel_y = 300
                print("Up arrow key is pressed")
            elif symbol == arcade.key.DOWN:
                self.vel_y = -300
                print("Down arrow key is pressed")
            elif symbol == arcade.key.LEFT:
                self.vel_x = -300
                print("Left arrow key is pressed")
            elif symbol == arcade.key.RIGHT:
                self.vel_x = 300
                print("Right arrow key is pressed")

        # Creating function to change the velocity
        # when button is released
        def on_key_release(self, symbol, modifier):

            # Checking the button released
            # and changing the value of velocity
            if symbol == arcade.key.UP:
                self.vel_y = 0
            elif symbol == arcade.key.DOWN:
                self.vel_y = 0
            elif symbol == arcade.key.LEFT:
                self.vel_x = 0
            elif symbol == arcade.key.RIGHT:
                self.vel_x = 0

    # Calling MainGame class
    MainGame()
    arcade.run()



# v1
# import GuiAPPs as guiApps
# guiApps.guiCalcShow()
def guiCalcShow():
    import PySimpleGUI as sg

    # default settings
    bw = {'size': (7, 2), 'font': ('Franklin Gothic Book', 24), 'button_color': ("black", "#F8F8F8")}
    bt = {'size': (7, 2), 'font': ('Franklin Gothic Book', 24), 'button_color': ("black", "#F1EABC")}
    bo = {'size': (15, 2), 'font': ('Franklin Gothic Book', 24), 'button_color': ("black", "#ECA527"), 'focus': True}

    layout = [
        [sg.Text('PyDataMath-II', size=(50, 1), justification='right', background_color="#272533",
                 text_color='white', font=('Franklin Gothic Book', 14, 'bold'))],
        [sg.Text('0.0000', size=(18, 1), justification='right', background_color='black', text_color='red',
                 font=('Digital-7', 48), relief='sunken', key="_DISPLAY_")],
        [sg.Button('C', **bt), sg.Button('CE', **bt), sg.Button('%', **bt), sg.Button("/", **bt)],
        [sg.Button('7', **bw), sg.Button('8', **bw), sg.Button('9', **bw), sg.Button("*", **bt)],
        [sg.Button('4', **bw), sg.Button('5', **bw), sg.Button('6', **bw), sg.Button("-", **bt)],
        [sg.Button('1', **bw), sg.Button('2', **bw), sg.Button('3', **bw), sg.Button("+", **bt)],
        [sg.Button('0', **bw), sg.Button('.', **bw), sg.Button('=', **bo, bind_return_key=True)],
    ]
    window = sg.Window('PyDataMath-II', layout=layout, background_color="#272533", return_keyboard_events=True)

    ''' calculator functions '''
    var = {'front': [], 'back': [], 'decimal': False, 'x_val': 0.0, 'y_val': 0.0, 'result': 0.0, 'operator': ''}

    # helper functions
    def format_number():
        ''' create a consolidated string of numbers from front and back lists '''
        return float(''.join(var['front']) + '.' + ''.join(var['back']))

    def update_display(display_value):
        ''' update the calculator display after an event click '''
        try:
            window['_DISPLAY_'].update(value='{:,.4f}'.format(display_value))
        except:
            window['_DISPLAY_'].update(value=display_value)

    # click events
    def number_click(event):
        ''' number button button click event '''
        global var
        if var['decimal']:
            var['back'].append(event)
        else:
            var['front'].append(event)
        update_display(format_number())

    def clear_click():
        ''' CE or C button click event '''
        global var
        var['front'].clear()
        var['back'].clear()
        var['decimal'] = False

    def operator_click(event):
        ''' + - / * button click event '''
        global var
        var['operator'] = event
        try:
            var['x_val'] = format_number()
        except:
            var['x_val'] = var['result']
        clear_click()

    def calculate_click():
        ''' equals button click event '''
        global var
        var['y_val'] = format_number()
        try:
            var['result'] = eval(str(var['x_val']) + var['operator'] + str(var['y_val']))
            update_display(var['result'])
            clear_click()
        except:
            update_display("ERROR! DIV/0")
            clear_click()

    while True:
        event, values = window.read()
        print(event)
        if event is None:
            break
        if event in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
            number_click(event)
        if event in ['Escape:27', 'C', 'CE']:  # 'Escape:27 for keyboard control
            clear_click()
            update_display(0.0)
            var['result'] = 0.0
        if event in ['+', '-', '*', '/']:
            operator_click(event)
        if event == '=':
            calculate_click()
        if event == '.':
            var['decimal'] = True
        if event == '%':
            update_display(var['result'] / 100.0)


# v1

# import GuiAPPs as guiApps
# guiApps.guiColorsShow()

# you can change settings - with the right click menu
# you can save the location for next time you open it

def guiColorsShow():
    # very complex - shows all the color swatches
    # if you click on a color square, it copies the web color to clipboard

    import PySimpleGUI as sg

    """
        Demo Theme Color Swatches

        Sometimes when working with themes, it's nice ot know all of the hex values
        for the theme.  Or, maybe you want to scroll through the list of themes and
        look at the colors in the theme as groups of color swatches.  Whatever thr
        reason, this ia good candidate for you.

        Thie program is interactive.  In addition to showing you the swatches, you can
        interact with them.  
        * If you hover with your mouse, you'll get a tooltip popup  that tells you the hex value.  
        * If you left click, then the value it posted to the clipboard.
        * If you right click a swatch, then the right clip menu will show you the hex value.
          If you then select that menu item, it's copied to the clipbard.

        The code has several examples you may want to try out in your prgorams.  Everything from
        using "Symbols" to make the swatches, so generating layouts, integrating (optionally) other
        packages like pyperclip, moving a window based on the size of the window

        This code's pattern is becoming more widespread lately:
        * Have a "create_window' function where the layout and Window is defined
        * Use a "main" program function where the event loop also lives

        Copyright 2020  PySimpleGUI.org
    """

    # Try and import pyperclip. Save if can be used or not.
    try:
        import pyperclip

        pyperclip_available = True
    except:
        pyperclip_available = False

    def create_window():
        # Begin the layout with a header
        layout = [
            [sg.Text('Themes as color swatches', text_color='white', background_color='black', font='Default 25')],
            [sg.Text('Tooltip and right click a color to get the value', text_color='white', background_color='black',
                     font='Default 15')],
            [sg.Text('Left click a color to copy to clipboard (requires pyperclip)', text_color='white',
                     background_color='black', font='Default 15')]]
        layout = [[sg.Column(layout, element_justification='c', background_color='black')]]
        # Create the pain part, the rows of Text with color swatches
        for i, theme in enumerate(sg.theme_list()):
            sg.theme(theme)
            colors = [sg.theme_background_color(), sg.theme_text_color(), sg.theme_input_background_color(),
                      sg.theme_input_text_color()]
            if sg.theme_button_color() != sg.COLOR_SYSTEM_DEFAULT:
                colors.append(sg.theme_button_color()[0])
                colors.append(sg.theme_button_color()[1])
            colors = list(set(colors))  # de-duplicate items
            row = [sg.T(sg.theme(), background_color='black', text_color='white', size=(20, 1), justification='r')]
            for color in colors:
                if color != sg.COLOR_SYSTEM_DEFAULT:
                    row.append(
                        sg.T(sg.SYMBOL_SQUARE, text_color=color, background_color='black', pad=(0, 0),
                             font='DEFAUlT 20',
                             right_click_menu=['Nothing', [color]], tooltip=color, enable_events=True, key=(i, color)))
            layout += [row]
        # finish the layout by adding an exit button
        layout += [[sg.B('Exit')]]
        # place layout inside of a Column so that it's scrollable
        layout = [[sg.Column(layout, scrollable=True, vertical_scroll_only=True, background_color='black')]]
        # create and return Window that uses the layout
        return sg.Window('Theme Color Swatches', layout, background_color='black', finalize=True)

    def main():
        sg.popup_quick_message('This is going to take a minute...', text_color='white', background_color='red',
                               font='Default 20')
        window = create_window()
        sg.theme(sg.OFFICIAL_PYSIMPLEGUI_THEME)
        if window.size[1] > 100:
            window.size = (window.size[0], 1000)
        window.move(window.get_screen_size()[0] // 2 - window.size[0] // 2, window.get_screen_size()[1] // 2 - 500)

        while True:  # Event Loop
            event, values = window.read()
            print(event, values)
            if event == sg.WIN_CLOSED or event == 'Exit':
                break
            if isinstance(event, tuple):  # someone clicked a swatch
                chosen_color = event[1]
            else:
                if event[0] == '#':  # someone right clicked
                    chosen_color = event
                else:
                    chosen_color = ''

            if pyperclip_available:
                pyperclip.copy(chosen_color)
                sg.popup_auto_close(f'{chosen_color}\nColor copied to clipboard', auto_close_duration=1)
            else:
                sg.popup_auto_close(f'pyperclip not installed\nPlease install pyperclip', auto_close_duration=3)

        window.close()

    #if __name__ == '__main__':
    main()


# v1

# import GuiAPPs as guiApps
# guiApps.GuiCOMMISSIONshow()

def GuiCOMMISSIONshow():
    # simple input output
    # sales commission calculator
    #
    import PySimpleGUI as sg

    def compute_bonus(sales):
        return sales * .25

    def main():
        layout = [[sg.Text('Sales Commission Calculator')],
                  [sg.Text('How much did you sell?  $'), sg.Input(size=(8, 1), key='-IN-')],
                  [sg.Text('Your total income: '), sg.Text(size=(15, 1), key='-OUT-')],
                  [sg.Button('Calculate', bind_return_key=True), sg.Button('Exit')]]

        window = sg.Window('Sales Commission Calculator', layout)

        while True:  # Event Loop
            event, values = window.read()
            if event == sg.WIN_CLOSED or event == 'Exit':
                break
            if event == 'Calculate':
                try:
                    total = float(values['-IN-'])
                    total += compute_bonus(total)
                    window['-OUT-'].update(f'${total:.2f}')
                except:
                    window['-OUT-'].update('Invalid input')

        window.close()

    #if __name__ == '__main__':
    main()



# v1

# import GuiAPPs as guiApps
# guiApps.GuiCOOLdesignShow()

#apparently the design had something to do with Reddit

def GuiCOOLdesignShow():
    import PySimpleGUI as sg

    BG_COLOR = '#1B1B26'
    INPUT_BG_COLOR = '#2C2C37'
    BUTTON_BG_COLOR = BG_COLOR
    TEXT_COLOR = '#FCFDFF'

    def the_gui():
        sg.theme_background_color(BG_COLOR)
        sg.theme_element_background_color(BG_COLOR)
        sg.theme_input_background_color(INPUT_BG_COLOR)
        sg.theme_input_text_color(TEXT_COLOR)
        sg.theme_text_color(TEXT_COLOR)
        sg.theme_button_color((TEXT_COLOR, BUTTON_BG_COLOR))
        sg.set_options(text_element_background_color=BG_COLOR)
        sg.set_options(border_width=0)

        # --------------------- User defined elements ---------------------
        # It would have been better to render the buttons with the red line
        # rather than trying to line up the red line images. Space varies depending on OX
        def top_button(text, image_key, set_as_default=False):
            col = [[sg.Button(text, size=(10, 1), font='Helvetica 13 bold', button_color=(TEXT_COLOR, BG_COLOR))],
                   [sg.T('    ', font='Helvetica 13 bold', pad=(0, 0)),
                    sg.Image(data=red_line if set_as_default else blank_line, key=image_key, pad=(0, 0))]]
            return sg.Column(col, pad=(0, 0))

        # --------------------- BEGIN GUI DEFINITION ---------------------
        # This is the first of 4 Columns. It holds all the stuff to show when
        # the "Tasks" button is selected on top. Each button will have an column
        # When a new top-button is selected, the previous Column is made invisible
        task_col = sg.Column([[sg.Text('3 Tasks', size=(10, 1), font='Helvetica 15 bold', key='-OUT-TASKS-'),
                               sg.In(' ' * 20 + 'Search', size=(28, 1), key='-SEARCH-', font='Helvetica 13'),
                               sg.B(image_data=plus_button, key='-PLUS-')],
                              [sg.T('  Store    Product    Size   Profile    Proxies     Status', font='Any 10',
                                    text_color='#505063')],
                              [sg.T(size=(1, 4))],
                              ],
                             key='-COL-TASKS-')

        bottom_buttons_col = sg.Column(
            [[sg.T(background_color=INPUT_BG_COLOR, font='Any 4')],  # some padding at top and bottom of box
             [sg.B(image_data=green_button, key='-GREEN-', button_color=(INPUT_BG_COLOR, INPUT_BG_COLOR)),
              sg.B(image_data=yellow_button, key='-YELLOW-', button_color=(INPUT_BG_COLOR, INPUT_BG_COLOR)),
              sg.B(image_data=red_button, key='-RED-', button_color=(INPUT_BG_COLOR, INPUT_BG_COLOR))],
             [sg.T(background_color=INPUT_BG_COLOR, font='Any 4')], ],
            background_color=INPUT_BG_COLOR, pad=(0, 10))

        layout = [
            [top_button('Tasks', '-L1-', True), top_button('Profiles', '-L2-'), top_button('Proxies', '-L3-'),
             top_button('History', '-L4-')],
            [sg.T()],
            [task_col],  # Add the other main window columns here
            [bottom_buttons_col, sg.T(' ' * 90), sg.Button(image_data=captcha_button, key='-CAPTCHA-')]]

        window = sg.Window('Shopify Mockup', layout, use_default_focus=False, no_titlebar=True)

        top_button_selected = 1
        while True:  # Event Loop
            event, values = window.read()
            print(event, values)
            if event in (None, '-RED-'):
                break
            if event == 'Tasks':
                window['-COL-TASKS-'].update(visible=True)
                window[f'-L{top_button_selected}-'].update(data=blank_line)
                top_button_selected = 1
            elif event == 'Profiles':
                window['-COL-TASKS-'].update(visible=False)
                window[f'-L{top_button_selected}-'].update(data=blank_line)
                top_button_selected = 2
            elif event == 'Proxies':
                window['-COL-TASKS-'].update(visible=False)
                window[f'-L{top_button_selected}-'].update(data=blank_line)
                top_button_selected = 3
            elif event == 'History':
                window['-COL-TASKS-'].update(visible=False)
                window[f'-L{top_button_selected}-'].update(data=blank_line)
                top_button_selected = 4
            # indicate which button is currently selected
            window[f'-L{top_button_selected}-'].update(data=red_line)

        window.close()

    #if __name__ == '__main__':
    blank_line = b'iVBORw0KGgoAAAANSUhEUgAAAFgAAAAGCAMAAABwz6mBAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExw9IgAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAFUlEQVQoU2P4TyMwajAcDDWD//8HAKuCDg94rot1AAAAAElFTkSuQmCC'
    captcha_button = b'iVBORw0KGgoAAAANSUhEUgAAAHMAAAArCAMAAAB8QEdOAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABYWGRQUHBYXHBcYHBgZGxkaHhcXIRkZIRoaIBwbIRwcIRwdIh4eIB0eIx0dJR4eJh8fKR8gJSAfJSAfJyAgIiAhJSAgJiIiJCEiJiQkJiAgKCEhKyIiKCIiKiIiLCMkKCQjKSQkKSQkKiYmKCUmKiQkLCQkLiYnLCYmLicoLCgnLSgnLygoKigpLSkoLioqLCkqLiwtLyYmMCgoMCgoMioqMCoqMioqNCssMCwrMSwrMywsMSwsMi4uMC0uMiwsNCwsNi4vNC4uNi4uOC8wNDAvNDAvNzAwMjAwNTAwNjIyNDEyNjQ0NjAwODAwOjIyODIyOjIyPDM0ODQzODQzOzQ1OTQ0OjY2ODU2OzQ0PDQ0PjY2PDY2Pjc4PTg3PTg3Pzg4Ojg4PTk4Pjk6Pzw8PjY2QDg4QDg4Qjo6QDo6Qjo6RDs8QDw7QDw8QTw9Qj4+QD0+Qj09RTw8Rj4+RD4+RkFBQ0FCRUNERkJBSUJCSkNESEZGS0VGTEpKTkhIUEtMUUxLUExNUU5PVE9QVFBRVVFRWVNUWVVWWlVVXVhYWlhZXVhYYFxcZF9gZGBfZGFiZmZmamxsbmtscW1uc21udHFydnJzeHJyenN0eXR1eXV1fXh5fXx8fnh4gH59gn+AhIGChYOEiIWGiYqKkoyNkoyMlJCQkpKRl5GSl5OUmZeXn5mYnZubo5yboZ2eoqGipKKiqqOkqaurrampsaytsq6utbCxtrO0uLS1ura2vre4vLi4urm6vby8vru8wby7wb2+wsHBxsXGysTEzMbHzMbGzsnKzcvM0czL0M3N0c7P1M7O1s/Q0s/Q1NDP1dDQ0tHS1tPU1tTU2tbX2dbX29fW3NfY3NnZ29nZ3dvc3tzd39ra4dra5Nzb4N3d4t3d5d/g4uHi5+Pk5uHh6ebn6efo7Onp6+jp7ezs7unp8err8Ovr8+vs8O3u8ezs9O/w9PDw8vDx9vP09vT09vLz+PP0+PTz+PX2+vb3/Pf4/fn5/vv8//z7//7+/gAAAFDaIzYAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAG1UlEQVRYR72YDXgbZR3Ai+IUmF1FoBtZk7qapAkb2fXey13W3u4ud1lZd1566bauSTuRDrqVjoIMqw46GHaWMRXUgc5PwPmt42N8jO91aGGPDhUUC0MUdUYmAeLQshv/8H+Ta7KSdGzPQ/jlefrk7t78f/e+9977/7+tyOTxst4ywbJely2hTDidHsLzapmQZZknHtuUd3p4OXupPNDgKmpzrpzTR3j7annhc33NOqmyjN3Mw/vyTlZRNEQpPwI7O+f0UiM9IeQulBU265wtRPG7QMmdLiOaJuBLU4Eji53MKt8TJ3a0YrYStaX2+fIicK5MhUuLCvg4UYl/5Umfdx86mN5MBU7afA9lMffhJU+wJ+IxYwrr4qKKVxNwMFguyrGXe12Xc7kpLggaMYjHaCamQYxmH2lsVrxK1MtiHwQXl4iyXDbo0Qga/niSU5bFHLWdem2939/qUhIXxTQtmqDCGLo5VolpnFfgOLxhTmg2zl9G5vJzlzUajc09shyLYWtN4Lwa3i0XW23HLXAMZ5ipjazrqGcSKMEVWvgIK3B415rR45DJh0yDR+grLp/haSTn9zpmOJY1qsYZhgub4eRIsALemcJ90I5b4BhOXQ+HGH9knQ9/fFEiqiVWX0y7Ks8w+bhJujzoo0sXUc1lvMPXOLfLjHtI89zPrY7iaHBKIoF3yCYupu/gZI7h9Le0+v1t0vtVwyBOp8fHO2d4VFMlXWJNXUhk3KFImPGHxKDYfk710qXB9kDLokBLZ+AUucqjYnYiPhLvIlUOnx23QAmnrRTDp9d36OGOVYbB+9TeuNMR/7TqJIYRnsMs193+C+oi7RLTFJFqFoita8Xq4McW1H1S/OjaFucVvUQ2cdANnpim2mPHLWA7ffS52NhKsTPYEq7s/8lTL/3mBz3vc5jxb9z/2LdIlRza/ewfn37oluEP7Bp95g979/5+31B194//lH7ql2uq1z35aPfSmg2P7exVZfKl/b/eWuXgPcVZA8dAVUs7A62hU67eA6/vB7hnEyHyToCfmXJ81gvw3N8B/jY8+k+AQ4fG/3vJ4AgkXwBrb/upAN0L2nvhpa4qR3ynBXfEiYE5+e3YTr6gzDulVr1+u/XMmtot+2BrDRM5/KqV7A7Pak3CZ88c+C3cNn9hwxhsbmhY9PPxsQtahv8CX2kat7rn6OvhxZVMsC+VOvx6/8ppYd0OW+AYzrbpYeaAtUNqn/O1n36xb+XW9K7RN24W+5h0amgJsyN9O7Ow6VnYLDVNH/v/ju7ASTd+7yb3m3DNWnEIDp6+puUm695HrBuquzum22EL2E4hP4UKcygSqQmm4Wr38tMWu89l3CPw5Zth5GTdDy9+/YZvHoBbgpI4BtdLTd0WXD9v3oULP37e2Rb8G8CCA5I+7QHYtg1G3LpfL1o+7Tl0tHNCWqfXdx6EVf3u5W2VfdLy/8ElA6nx9SH/AUhj3D3BYFjcj05xEQ722Z+49KRPzVwBqYcfvGt3KqlXDkFK6ng5vb5yWvuJOFsrO1oPjm+qZpoGb/yCdCuk7h4B6/uhy96wfvHD727owldQ3g9bZHHxv2Djinlnbv7q5pkAKxoWDsJ426zb0skRbP5tJhI6EWebJNXeCfescV85CtuYkdSRIzAOu88SX/nP5309zhnxCee0hw49+OFLB34H31liwfyZ53XAmC6NQvpI6lXYo0snNrb91aGhJIzctw/GVl0G0Fc7ZyAJw9JfYZMQpclWU56HLYq8aBBe+/OPUtbTSxpeG//M/HkbIR0ZsJLXRPThl63BSv9xOPO5zAySNt+1/7AOw6+uCmyHu+v0lYF9sC3yCiQwT2mYxahTkztPGxrDmfPElUsDb4IkLd6YTrZvh13ucHXwcbi1PzCVc1KSy+drgVeMWOd1Vxk+XDPy2K3yqLjGXXHdBmJfLsJuVoBWBkJ2vS0BvRiNYS4TtFhxepiA1hhKIlY6RCloAWRO7aS1CqZmmoOnjMlqCY1lucLDeSeok0NnyV/QwoVasVDiuOIaw4YmS9rEPjw+2EyFd2ongkocXftkETF2NhfFWsQ+fEeoitZgpZy2UChRRU0iW/1PPQxF4MgptNZ0FmccOVvt5KBbuKOn7iR41cC6wD44DnBPKBMnOkvM9Ik4BgplLFByR8UQ3ueRTZXWR8dF1unAvYODN1GR2w2Xi1yhqBLZ4B3ZfRl5D3aeWSv10h0oOl04CeiMsR90GaCFPzVoysT+M+OyfWWz4nueneJRjiqzzgyW6tmaP9eiHNhWL7XlnBkXXY3K58Tg2RUtp7Sd1IrbHrvJuw4NLBT+LzXhxAEu49DiDGInjJnMW4afJfH6bdHpAAAAAElFTkSuQmCC'
    green_button = b'iVBORw0KGgoAAAANSUhEUgAAABMAAAAWCAMAAAAVQ1dNAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABR4Rh91SB15Rhp5TSV3RyZ8SyV6Ux6HTCaDTiqHWyyDWCiKUSuTViiXVSicWzODXD2BXDCaWjKbYzyZYDKjYTGjaDelaDGoZDmrbzyqazumcj+wcD25cTnCdD3BdTTUcjLeeDrcdT3feDPgbTLiczLjdzPlczDkdjbkdTfldjTmdjXndzPkeDHneTbmeTXmejblfDblfjTnfzXudzHpejHofDfofDTofTXseDnldTnkdzrmdjjmdz/gdj7idT3jdz3mcz3ldjzkdzzmdTvhfTrjfDnifTrjfjrkeTrleznkfjrnfj7heD3ieTzjej3kejzmeT/odT7pdzroeTjoezzoeDzufkCAZUaJZk2SdVSPeUWrakKpcUmkeE23d0DJd0bLfEjCdUrNf0DddEXce0TefkXff0jdd0/cfk3ffUHic0DidUPkckDkc0Pmc0LkdEPldkLmdULmdkDjekHjfEPleEDoeTbmgTvlgjjngDzkgjzsgEi7glu6gl29j26+m0fOgkvEgUrMhk3Lgk3KhkzMgUzOhEzKiELYgUnQgUrTg0jWgkvWhU/ShE3VgE3VgU3UhU3XiUjbgEvagkrag0jfgkjehUjciE/YiFLGiVHLglLJh1LOhlDNi1LNjFfOjFjLhlzMhFnMi1PRh1TUgVbVjlXagVLZjFnTilLckVfbkFvalUPjg0PhhEPghUHihEPihULkgUDmgkDlhkPkh0PnhELmhUXhgEXggkTigUXjhETihUXjhkfih0Tkgkbkg0TkhETiiUfki0HrgUvig0jmh0/gg0zgiFDmjFvjj1LmkFjjkFrokmLGlGfDkGbPl2rCmGPYkmbZnmbgkwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACXBECsAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABQ0lEQVQoU2P4H8X+Hw0w/K+vlWSGcqCA4f+FNcviRVihXDBg+L94Us+VRTE8UD4IMPxfMn1H5vKlSRIcUBGQ2MSDR1Iyso5PleeDCgHFul31ywtzSrbtS5ThgonNdNdQcQzW0q0+sWKeGCNErHGLQZiLlbae0brp6zvl+MFizVsNA52sdEyNN6xVqzmQIMoGFOs45O3nYK1vVrFxk6VJwOSVdYIgMQ9fe2dbi6o9u1TVladcOh/J8L91n5tdtr2Nuc/OaQrHzs6NFQDqbdnrn5Od5xLqlT7lzOomYbAdbbutC3Lzg0I8UycskGaBuCV5v7VLUXFZaVr/Qm6QCEisa7tauKbS0VOzhSAiILH2w5WKm0/2SXFCRUBis1bNON0rywvlgwDD/3OX588Rh/IggOF/w8U4JigHChj+R0dAmVDw/z8AkbkcWUjJmvYAAAAASUVORK5CYII='
    plus_button = b'iVBORw0KGgoAAAANSUhEUgAAABoAAAAYCAMAAADTXB33AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAAsbGAUpHQ01Kgo9KhUlIhEjLREqLxkpKB4qKhwtKR4sMBwsORI2KBE2LhY1LRA4LRkwJh00JBsxLh4xLR00Lhs+KBw9LBY3MBk2NB4yOx46MSAfJSEdKjMdLDgfMiM0GSM7GSEnJyAjKiMjLSMmKyUkLSAtJiIpLSIsLSUpLSUuKyglLS4kLCkoLiosKSgtLi4sLyIlMSUjMCYmMCAqMSMpNSYqMScrNCYuMSUtNCQtOCkmMSklNC0nMSkpMioqNCktMikuNS0qMS0qNS0tMSwsNSktOC4uOC0vPCI0JCQ4LSc8LSAxMSEwNSA0MiYwMSUzNCU1MSY2NCEyOiA1OiYwOSc1PiM6MiM5NiA+NCY4MiY7NiU9NyA/OSkxNCk1Ni4yMy4wNCgyOSk2PS8yOS43Pio5My05Oi45PzMnJzUmKzEqLjgpJjUjMzEqMjErNTAuMTEuNjUpMzQvMzYvNzQsODspNzksOz81KTEwNTY5MjU7Ny01QDE6RAJRMQ9XMhtNKh1DNhdZPh5VPg5kJQlmNxVhMCJCNyVANyRCOCZJMyZOMydOOSdOPClAOi9MNihKPC1JPS1NPiVXJCFZKCVUMi9YOCxdPTJAMDRAMjBEOTFSPzhRNDRpOxVeQQ1/QRltSy1ARylFSC9fRy9ZSzFQSDJcRiZiSSBtTS5qSCRxQzNlQDZjTzthVDB6STp2UkJrXURvXEh2XB+KOiicVTSGRDWMVTiIUz6QXzqdbjWgXDKzVjyyXjSlZzK6Zj2+azfDYj3LdzvbbTHXczjYdC/ibTXmdDvrfj/pfD/wfkWaVlGMXEGNZ0uObUKbZUWbbkqQa0mSdFaJaFCTcFeZfUGiXUSpZ0C6cUjDckDVd0PbdkXadkPeeUXff1LBf0HsejjPgD/eimWwkUrKjU/XjUnfhk3YhUvcj03UklbLh1rPi1jEkFvOlV7JlV3NlVPXg1TYhVvZhVvcgkfjgErnjlDngFHljVfhlmbKlmrDl2zLk2DQmGnWk3PelgAAAEiibAcAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAACNElEQVQoU2P4Dwc5/3Ny8p311KDc/1ApHR0958JCQ9eiqiJnG6gkRMquqCop0UDJwMBAz965oMgELAiWcnbWU9UMCg6Kjg4KcHR2cXOxV4FIqdmUudhb+opKd3R1xgbHu7kVubmB5Bj+q9gDWfEZkfxNSzeuW9YfHOBW5ACWY/iv5uDhoaEVwMW74tLjq5smiXBqxms5eLiZ/GcwcbB3CkuTKakWa3vy8v2GCT7egjFWDvYODiYM9g727qYpWjWzpi14+OjpjjU93eIRlg5AYMLg4OaQapIQtXzG+q2Hnj3fvX31qjnpjm4g2xgcPBw8Uv1bzu68fuDWl3v7b+y7sHk20JUgKTcPh6QMgYVvXn+8e/L4iSNfX7y9Mjnew83DwwEkFR/MvPLn30+3Hxw7dfT7jz/nJiZAdbnZO1mJ9F0+c3rP4cPf9l47f3FtbLwbyK8gKTcPJ+2ZClO2HLzzedvUxl5pXyc3V5CUmpubg6eDblalYuvND//mzfUK4vZztAcCNYb/9m5O1u5l2bkK7fdf/Z4+Uz0hNNwCZB5QSs3enUcqRVNfqGHXu19LJklKsrNZuXm42YNC3sQ6RCqUOymdZX59M5Ow5OJFde4ebg6Q+DJ3t0o2Ly7lkOCL43TiNpWVBcuApZT1NDJc5fJsMv2SyypcPCoqXOyBomCp/1ysQUly8i511kZ5eTr2hUWQxAGW4mTkTCqvsDWrNaqocEt01gHLQKQgwNjIwQGWmv7///8fAJ7/NhA3zMv/AAAAAElFTkSuQmCC'
    red_button = b'iVBORw0KGgoAAAANSUhEUgAAABYAAAAVCAMAAAB1/u6nAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAF0jPF0mO18lPWEYM2EbNWAcM2AfN2QZN2cbNWQeNmEdOWAdPGYaOGQdO2oTNWoVNmwXOGgcNmwZN2gbO2keOmkePG0YOGwdOm4ePXAKL3MKMnMPNXAXNXIXNnIXOHAaPXEcOXIdOnIfOXUZOXcZPXYcOHYdPXwTO3oZPHocPnofPn0ZPWEjOGEhPGQiPWQkPGkgO2ohPGwiO2wgPG0hP2wkPHAgO3YgPXUZQH8bQWwmQGwrQ4cOO4QQNYMWPYAXP4UXPIEdP4UaPYYdPooTO4sVPZMPN5YYPoMdQocfRIsWQYkbQIocQ4geRI0YQo8bQo4aRJsOQpAQQJEUQJUXQpYWRpIZQpUbQpYeRJMbSJIfSpgUQp0VQ5wXRpkaQ5gbRZ4ZRoAhQYUiQYwjS5UhRqQPRqsMRKYSRKEYRqEZSaYeTqsTRqgURK0XR6kSSakVSa0VSK8ZR6sbTKwYSq8bTb0MQ7IQQrAURLAWTLEaT7oTR7oVTb0VSb0VTrkcT70ZTr4ZUaIgTq8gTKYgUqogUakkU6klVLMgVLcjV7MkWbQkWbkjU7ojWMIOS8ENTMUPTMQSTs8TTcUSUMUXVMYeWc0XVMgbUcodVc0ZVMsdWM4aWdcMTNIOUNsPVtYQTdIWU9AWVdQSVdUUU9QVWNAaVdAdVdcaVNMZWNYZW9kSU9sSVtoWVd4RUt0VWN8ZVtsaWdgfWdwaWd8eYcEgUscjWMggW8siWc8gW9MhX9YgXdUjYeMHUeIIVOMMUOoOVu0KVOwPVOgOWO8OWuMRVeMRWOUQWOcWWuQZWOQdXugRV+gWV+4TV+oSWusUWeoVXOwQWO4VWegaWukYXOoYX/IKVfYJVvYMV/ENWPMMWvAOWPMPWvANXPYJWPUNWPYPX/8GVvoHWf8CWv8EWP8EWv4GWP8HW/8FXfoIVfwKVvkKWfkMWfkOXf4JWf4KXP0NXPERWvASXfQQW/YWX/kQX/4QXOEeYukXYO0bYv8OYvYSYfUUYPIYYuIjZucgYQAAAAr+GkYAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABy0lEQVQoU2P4zyjCL2D0HwG4OFn+/2f4Lx6dnRUgBxX7r5ycmuonDhR26N69ojFRTRckKOSYN2Pp9jat/wx6Udu+H76yI17W4P9/E5/CVZ9vnewECouFzb7/5OefhlAvdRXf0gX33r293KH+n4HPdsqv589frdlaHBdTMvPc2yfv1zWZAs2WKZh3992z/f8WTp648Pint2/P1ngyA4W57dPn/npz9cP5Y8fO3rv76sK0GF6QA///18ycef7NtVsf7l17+/XD4gwnoBBImCmpZNG9t6/fv3384OqccjdDqPB/s5i+A+/evn379MW+MndFkAhY2Dx2woF3D54+fXtvbbWHEkxYIrxm9Q2g2pf3Lq6f3uwMCiCgsGho3bqPt699vX7w9KUTa5bl+IuBhPUDJx96/+7ehSPzJy0/ceb66z393jxAYavKY++ePzy1obaiaMvGcw+ePNmbb/mfgTdoyZfnb87P7Il0cY6o3/T60fM3U7z/MwimLbpz88euXDsLM2PthJojb96drXNjY+AInvp386wSVxXW///Z5UNqVn7b2aoDNFujpbcqzlHRBuTc/8KB2V3tKaJAYTFVaSl1a7AgEOhJKkhy//8PAMoKLCsLw4FtAAAAAElFTkSuQmCC'
    red_line = b'iVBORw0KGgoAAAANSUhEUgAAAFgAAAAGCAMAAABwz6mBAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAKMXRqQRR6QfTqwUR6oYR6oYSakZSrEYTrkSSroVTb0WTLsdUK4hVbohWbojWMcPT8IUT8cRTsUTT8QXT8kRT8gWTsISUMMTUcATUsAXUMUTUcYXUMQbUsgRUcgWUMgVVs0TVMwUUM4VUc8WUs8XU88XVc8UWMoYVssYWdEVUtMVU9AWU9EUWNAdV9UYVtcYW9oTVtgXWt4cW90cXdoiXusJU+0LVe0NVu0MWOITV+QSW+QXWuYeX+sRW+gSWOoSWekWW+oUXO0QWe8RWu0QW+8RXO4QXfUKV/EOWfANXPAPXfMPXvcMWfQNW/YNXvoHV/8CWP8DWf0EWP8FWv8HWf4GWv4JWf8JWvwJW/0KWv8LW/4MXPwOXPAQWfERWvMWXPQRWfQSWgkYR8AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAqklEQVQoU2P4zySprquooKGmAwEq5AEtbW0dHVVVVR1lJXlZHtb//xl4Na19/P283eI8KQZxzs5xnuYuDlbGpiL/GfiMvMKCAoMDoigEEVA6PMrDzN5Wn42B38A9MiQ4NCqGchAbCySiY3wtHG312RmYpQzt4xOTEpydXSmDDnYOds6ucZbOTjYmepz/Gf7/Z+GWERMTExaWpghKCAKhsJyogJA4Fwfj//8Ar/aGF89us74AAAAASUVORK5CYII='
    yellow_button = b'iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAMAAABhEH5lAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAALWfL7+lN7esQrinS72mSbirQrmqQ7+oSr2nUsGmPcGlQcOnRMCnSsKnU8OmVsOmWMGnWsGoUcGpU8OqWsSjYMSnY8GoZs2sae/WPvfOJvbPKvrOJfjPKfzMKv/PK/PON/PPPfLOP//HNf/HP/rPM/vMNv3KMf7LMv3KM//LNv/NMP3MMf/MM/7OMP/NNf7ON/jLOvrJPvrOOf/LOf/IPP/LPP/KPf/KPv/MOv/MO//MPP/MPv7OPP/PPf3PPv/OP/PSL/bRK/DYLv/RL//SLfPWMPPVNfHWNPLWNfLWN/fTNPfTN/XVNPXUNfXUN/PUPPPUPvbSOfXSPPbSPvfTP/XUOfDYMPnTNP/RMP3RMv/SMP7SM//RNvrROfnRO/nSOfrQPPnRPv3QOfzQO9nAWe/MTOnPVu3OUezOUunOXe3MWO3QRu/URe/TTu7US+7UTO3ZRufRWe/SVO7WUu/RWfXHTfXLQfXLRfXMQPbJSPXPSP3HQP7GQf/FR//HR//ESP/GSf/GSv/HS//HTPvLQ/nPRfrOR//KQP/KQv/JRP/JRf/IR//KRP/KRf/LRv/LR/7NQP/MQv/MQ/zOQPzOQv/MRP3MRf7ORP/ORfzOR/rOSfrOS/nOTv/JSP/ISf/JS/zLSP/KSfzLSv/JTv7LTP3LTvzNSfzNS/PPVPfOWvfOXPbOXf/GUP/GUv/FVP/GVP/HVvrLVfnNUPrMUv/IUP7KUP/LUf7IVP7JV/3KV/vLXfjNXP/IXv3LXPPSRfDWQ/bRQvbQRPbQRfbQR/bWR/TSSvbVSvHZQ/nQQPnQRPjUSPrWTvzQS/PQUPPRU/DTU/LQVPLTVPXTVffTWOTMaubMa+zFYO/Hb+/KYO/PYu/Ia+DOfOfRbu3TZO7SbvPFZ/bJbPTNbvrKY/jMYfPMcfPTZPLUYvfQZ/TRafbVavLRcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN+7z/YAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABYUlEQVQoUwFWAan+AP8LCgUEAwYIDQYHCQ4MAgH//wBlz8bQdHHIx8sZwNPUzMVtcv8A6ngxeSFBQi4rGhsxMiYlUtAUAOihPJeUXEQvLR8uNyQjJ2PTEADhuKC4t5mTn5+Jj7GvgH2FrBUA4K6CuLijoq2tfqS9vbWep6wYAOSijaadw8qlpZqcurmilcnRDwC8ljuHxFFQyoZUwbOzlV9SbhIAqpEwyVFIV09WSErDw19LSG8SAKuRMGJTV0NOTkZJwsJgS05wEwDjkDuYwU9NX2FMU5uolF9TcxEA44w4kJdfXpKSP5W2to09YtERAL6KNYyQPDyMgY6isK+LO2TODgC7jTQ4ODo2f4GKi4SDiDuUqQ8A181jW0VZMJKWQDkqKCwze9oWAOtmIB0cHil8fZg+XVpYVdLfFwD/db9STGKHtLJ2enciImxn1f8A/9ZqaWhr2dvY5eLp5ufe3dz/ZdGaljRkmtwAAAAASUVORK5CYII='
    the_gui()



# v1

# import GuiAPPs as guiApps
# guiApps.guiDateShow()

# you can change settings - with the right click menu
# you can save the location for next time you open it

def guiDateShow():
    import PySimpleGUI as sg
    import sys
    from datetime import datetime
    from datetime import timedelta
    """
        Desktop Widget - Display the date
        Simple display of the date in the format of:
        Day of week      Day    Month     Year
        You can change the format by modifying the function get_date_string
        Copyright 2021 PySimpleGUI
    """

    ALPHA = 0.9  # Initial alpha until user changes
    THEME = 'Dark green 3'  # Initial theme until user changes
    refresh_font = title_font = 'Courier 16'
    main_info_font = sg.user_settings_get_entry('-main info font-', 'Courier 70')

    main_info_size = (12, 1)
    UPDATE_FREQUENCY_MILLISECONDS = 1000 * 60 * 60  # update every hour by default until set by user


    def choose_theme(location, size):
        """
        A window to allow new themes to be tried out.
        Changes the theme to the newly chosen one and returns theme's name
        Automaticallyi switches to new theme and saves the setting in user settings file
        :param location: (x,y) location of the Widget's window
        :type location:  Tuple[int, int]
        :param size: Size in pixels of the Widget's window
        :type size: Tuple[int, int]
        :return: The name of the newly selected theme
        :rtype: None | str
        """
        layout = [[sg.Text('Try a theme')],
                  [sg.Listbox(values=sg.theme_list(), size=(20, 20), key='-LIST-', enable_events=True)],
                  [sg.OK(), sg.Cancel()]]

        window = sg.Window('Look and Feel Browser', layout, location=location)
        old_theme = sg.theme()
        while True:  # Event Loop
            event, values = window.read()
            if event in (sg.WIN_CLOSED, 'Exit', 'OK', 'Cancel'):
                break
            sg.theme(values['-LIST-'][0])
            window.hide()
            # make at test window to the left of the current one
            test_window = make_window(location=((location[0] - size[0] * 1.2, location[1])), test_window=True)
            test_window.read(close=True)
            window.un_hide()
        window.close()

        # after choice made, save theme or restore the old one
        if event == 'OK' and values['-LIST-']:
            sg.theme(values['-LIST-'][0])
            sg.user_settings_set_entry('-theme-', values['-LIST-'][0])
            return values['-LIST-'][0]
        else:
            sg.theme(old_theme)
        return None


    def make_window(location, test_window=False):
        """
        Defines the layout and creates the window for the main window
        If the parm test_window is True, then a simplified, and EASY to close version is shown
        :param location: (x,y) location to create the window
        :type location: Tuple[int, int]
        :param test_window: If True, then this is a test window & will close by clicking on it
        :type test_window: bool
        :return: newly created window
        :rtype: sg.Window
        """
        #reset settings
        #sg.user_settings_delete_filename()
        #sg.popup('Settings file deleted.  Please restart your program.')
        #
        title = sg.user_settings_get_entry('-title-', '')
        if not test_window:
            theme = sg.user_settings_get_entry('-theme-', THEME)
            sg.theme(theme)
        main_info_font = sg.user_settings_get_entry('-main info font-', 'Courier 60')

        # ------------------- Window Layout -------------------
        initial_text = get_date_string()
        if test_window:
            title_element = sg.Text('Click to close', font=title_font, enable_events=True)
            right_click_menu = [[''], ['Exit', ]]
        else:
            title_element = sg.pin(sg.Text(title, size=(20, 1), font=title_font, justification='c', k='-TITLE-'))
            right_click_menu = [[''],
                                ['Choose Title', 'Edit Me', 'New Theme', 'Save Location', 'Font', 'Refresh', 'Set Refresh Rate', 'Show Refresh Info', 'Hide Refresh Info', 'Reset',
                                 'Alpha', [str(x) for x in range(1, 11)], 'Exit', ]]


        layout = [[title_element],
                  [sg.Text(initial_text, size=(len(initial_text)+2, 1), font=main_info_font, k='-MAIN INFO-', justification='c', enable_events=test_window)],
                  [sg.pin(
                      sg.Text(size=(15, 2), font=refresh_font, k='-REFRESHED-', justification='c', visible=sg.user_settings_get_entry('-show refresh-', True)))]]

        # ------------------- Window Creation -------------------
        try:
            window = sg.Window(
                               'Desktop Widget Template',
                               layout,
                               location=location,
                               no_titlebar=True, #False
                               grab_anywhere=True,
                               margins=(0, 0),
                               element_justification='c',
                               element_padding=(0, 0),
                               alpha_channel=sg.user_settings_get_entry('-alpha-', ALPHA),
                               finalize=True,
                               right_click_menu=right_click_menu,
                               right_click_menu_tearoff=False
                               )
        except Exception as e:
            if sg.popup_yes_no('Error creating the window', e,
                               'Do you want to delete your settings file to fix?') == 'Yes':
                sg.user_settings_delete_filename()
                sg.popup('Settings file deleted.  Please restart your program.')
                exit()
        return window

    def get_date_string():
        dtime_here = datetime.utcnow() + timedelta(hours=-5)
        return dtime_here.strftime('%a %d %b %Y')


    def main(location):
        """
        Where execution begins
        The Event Loop lives here, but the window creation is done in another function
        This is an important design pattern
        :param location: Location to create the main window if one is not found in the user settings
        :type location: Tuple[int, int]
        """

        window = make_window(sg.user_settings_get_entry('-location-', location))

        refresh_frequency = sg.user_settings_get_entry('-fresh frequency-', UPDATE_FREQUENCY_MILLISECONDS)

        while True:  # Event Loop
            # Normally a window.read goes here, but first we're updating the values in the window, then reading it
            # First update the status information
            window['-MAIN INFO-'].update(get_date_string())
            # for debugging show the last update date time
            if sg.user_settings_get_entry('-title-', 'None') in ('None', 'Hide'):
                window['-TITLE-'].update(visible=False)
            else:
                window['-TITLE-'].update(sg.user_settings_get_entry('-title-', 'None'),visible=True)
            window['-REFRESHED-'].update(datetime.now().strftime("%m/%d/%Y\n%I:%M:%S %p"))

            # -------------- Start of normal event loop --------------
            event, values = window.read(timeout=refresh_frequency)
            print(event, values)
            if event in (sg.WIN_CLOSED, 'Exit'):  # standard exit test... ALWAYS do this
                break
            if event == 'Reset':
                sg.execute_editor(__file__)
                # reset settings
                sg.user_settings_delete_filename()
            if event == 'Edit Me':
                sg.execute_editor(__file__)
            elif event == 'Choose Title':
                new_title = sg.popup_get_text('Choose a title for your Widget\nEnter None if you do not want anything displayed', location=window.current_location())
                if new_title is not None:
                    if new_title in ('None', 'Hide'):
                        window['-TITLE-'].update(visible=False)
                    else:
                        window['-TITLE-'].update(new_title, visible=True)
                    sg.user_settings_set_entry('-title-', new_title)
            elif event == 'Show Refresh Info':
                window['-REFRESHED-'].update(visible=True)
                sg.user_settings_set_entry('-show refresh-', True)
            elif event == 'Save Location':
                sg.user_settings_set_entry('-location-', window.current_location())
                sg.popup_notify(f'Saved your current window location:', window.current_location(), title='Saved Location')
            elif event == 'Hide Refresh Info':
                window['-REFRESHED-'].update(visible=False)
                sg.user_settings_set_entry('-show refresh-', False)
            elif event in [str(x) for x in range(1, 11)]:  # if Alpha Channel was chosen
                window.set_alpha(int(event) / 10)
                sg.user_settings_set_entry('-alpha-', int(event) / 10)
            elif event == 'Set Refresh Rate':
                choice = sg.popup_get_text('How frequently to update window in seconds? (can be a float)',
                                           default_text=sg.user_settings_get_entry('-fresh frequency-', UPDATE_FREQUENCY_MILLISECONDS) / 1000,
                                           location=window.current_location())
                if choice is not None:
                    try:
                        refresh_frequency = float(choice) * 1000  # convert to milliseconds
                        sg.user_settings_set_entry('-fresh frequency-', float(refresh_frequency))
                    except Exception as e:
                        sg.popup_error(f'You entered an incorrect number of seconds: {choice}', f'Error: {e}', location=window.current_location())
            elif event == 'New Theme':
                loc = window.current_location()
                if choose_theme(window.current_location(), window.size) is not None:
                    window.close()  # out with the old...
                    window = make_window(loc)  # in with the new
            elif event == 'Font':
                font = sg.popup_get_text('Enter font string using PySimpleGUI font format (e.g. courier 70 or courier 70 bold)', default_text=sg.user_settings_get_entry('-main info font-'), keep_on_top=True)
                if font:
                    sg.user_settings_set_entry('-main info font-', font)
                    loc = window.current_location()
                    _, window = window.close(), make_window(loc)
        window.close()


    #if __name__ == '__main__':
    # To start the window at a specific location, get this location on the command line
    # The location should be in form x,y with no spaces
    location = (None, None)  # assume no location provided
    if len(sys.argv) > 1:
        location = sys.argv[1].split(',')
        location = (int(location[0]), int(location[1]))
    main(location)


# v1

# import GuiAPPs as guiApps
# guiApps.GuiDirectoryOfFILESshow()

# you can change settings - with the right click menu
# you can save the location for next time you open it

def GuiDirectoryOfFILESshow():
    import PySimpleGUI as sg
    import os.path

    # --------------------------------- Define Layout ---------------------------------

    # First the window layout...2 columns

    left_col = [[sg.Text('Images Folder'), sg.In(size=(25, 1), enable_events=True, key='-FOLDER-'), sg.FolderBrowse()],
                [sg.Listbox(values=[], enable_events=True, size=(40, 20), key='-FILE LIST-')]]

    # For now will only show the name of the file that was chosen
    images_col = [[sg.Text('You choose from the list:')],
                  [sg.Text(size=(40, 3), key='-TOUT-')],
                  [sg.Image(key='-IMAGE-')]]

    # ----- Full layout -----
    layout = [[sg.Column(left_col), sg.VSeperator(), sg.Column(images_col)]]

    # --------------------------------- Create Window ---------------------------------
    window = sg.Window('Gui Directory of Files - Viewer', layout)

    # ----- Run the Event Loop -----
    # --------------------------------- Event Loop ---------------------------------
    while True:
        event, values = window.read()
        if event in (None, 'Exit'):
            break
        if event == '-FOLDER-':  # Folder name was filled in, make a list of files in the folder
            folder = values['-FOLDER-']
            try:
                file_list = os.listdir(folder)  # get list of files in folder
            except:
                file_list = []

            fnames = [f for f in file_list if os.path.isfile(
                os.path.join(folder, f)) and f.lower().endswith((".png", ".jpg", "jpeg", ".tiff", ".bmp"))]
            window['-FILE LIST-'].update(fnames)
        elif event == '-FILE LIST-':  # A file was chosen from the listbox
            try:
                filename = os.path.join(values['-FOLDER-'], values['-FILE LIST-'][0])
                window['-TOUT-'].update(filename)
                window['-IMAGE-'].update(filename=filename)

            except:
                pass  # something weird happened making the full filename

    # --------------------------------- Close & Exit ---------------------------------

    window.close()


# v1

# import GuiAPPs as guiApps
# guiApps.guiPhotoGalleryShow() # "z-IMAGES_1\0.cool\"

# if you click on the image - you see it bigger in it's own window

# ROOT_FOLDER = r'C:\Users\myvor\PycharmProjects\pythonProject\
# z-IMAGES_1\0.cool\beautiful wallpapers 1'  # r'c:\your\images'

def guiPhotoGalleryShow(folder_name="last_folder_thing_name"):
    import PySimpleGUI as sg
    import PIL
    from PIL import Image
    import io
    import base64
    import os

    """
        Using PIL with PySimpleGUI 
        This image viewer uses both a thumbnail creation function and an image resizing function that
        you may find handy to include in your code.
        Copyright 2020 PySimpleGUI.org
    """

    THUMBNAIL_SIZE = (200, 200)
    IMAGE_SIZE = (800, 800)
    THUMBNAIL_PAD = (1, 1)
    root_top_folder = "z-IMAGES_1\\0.cool"
    folder_name = "premium wallpapers modern smart house"
    ROOT_FOLDER = r"C:\Users\myvor\PycharmProjects\pythonProject"+"\\"+root_top_folder+"\\"+folder_name+"\\"  # r'c:\your\images'
    #print("ROOT_FOLDER")
    #print(ROOT_FOLDER)
    screen_size = sg.Window.get_screen_size()
    thumbs_per_row = int(screen_size[0] / (THUMBNAIL_SIZE[0] + THUMBNAIL_PAD[0])) - 1
    thumbs_rows = int(screen_size[1] / (THUMBNAIL_SIZE[1] + THUMBNAIL_PAD[1])) - 1
    THUMBNAILS_PER_PAGE = (thumbs_per_row, thumbs_rows)

    def make_square(im, min_size=256, fill_color=(0, 0, 0, 0)):
        x, y = im.size
        size = max(min_size, x, y)
        new_im = Image.new('RGBA', (size, size), fill_color)
        new_im.paste(im, (int((size - x) / 2), int((size - y) / 2)))
        return new_im

    def convert_to_bytes(file_or_bytes, resize=None, fill=False):
        '''
        Will convert into bytes and optionally resize an image that is a file or a base64 bytes object.
        Turns into  PNG format in the process so that can be displayed by tkinter
        :param file_or_bytes: either a string filename or a bytes base64 image object
        :type file_or_bytes:  (Union[str, bytes])
        :param resize:  optional new size
        :type resize: (Tuple[int, int] or None)
        :return: (bytes) a byte-string object
        :rtype: (bytes)
        '''
        if isinstance(file_or_bytes, str):
            img = PIL.Image.open(file_or_bytes)
        else:
            try:
                img = PIL.Image.open(io.BytesIO(base64.b64decode(file_or_bytes)))
            except Exception as e:
                dataBytesIO = io.BytesIO(file_or_bytes)
                img = PIL.Image.open(dataBytesIO)

        cur_width, cur_height = img.size
        if resize:
            new_width, new_height = resize
            scale = min(new_height / cur_height, new_width / cur_width)
            img = img.resize((int(cur_width * scale), int(cur_height * scale)), PIL.Image.ANTIALIAS)
        if fill:
            img = make_square(img, THUMBNAIL_SIZE[0])
        with io.BytesIO() as bio:
            img.save(bio, format="PNG")
            del img
            return bio.getvalue()

    def display_image_window(filename):
        try:
            layout = [[sg.Image(data=convert_to_bytes(filename, IMAGE_SIZE), enable_events=True)]]
            e, v = sg.Window(filename, layout, modal=True, element_padding=(0, 0), margins=(0, 0)).read(close=True)
        except Exception as e:
            print(f'** Display image error **', e)
            return

    def make_thumbnails(flist):
        layout = [[]]
        for row in range(THUMBNAILS_PER_PAGE[1]):
            row_layout = []
            for col in range(THUMBNAILS_PER_PAGE[0]):
                try:
                    f = flist[row * THUMBNAILS_PER_PAGE[1] + col]
                    # row_layout.append(sg.B(image_data=convert_to_bytes(f, THUMBNAIL_SIZE), k=(row,col), pad=THUMBNAIL_PAD))
                    row_layout.append(sg.B('', k=(row, col), size=(0, 0), pad=THUMBNAIL_PAD, ))
                except:
                    pass
            layout += [row_layout]
        layout += [[sg.B(sg.SYMBOL_LEFT + ' Prev', size=(10, 3), k='-PREV-'),
                    sg.B('Next ' + sg.SYMBOL_RIGHT, size=(10, 3), k='-NEXT-'), sg.B('Exit', size=(10, 3)),
                    sg.Slider((0, 100), orientation='h', size=(50, 15), enable_events=True, key='-SLIDER-')]]
        return sg.Window('Thumbnails', layout, element_padding=(0, 0), margins=(0, 0), finalize=True,
                         grab_anywhere=False, location=(0, 0), return_keyboard_events=True)

    EXTS = ('png', 'jpg', 'gif')

    def display_images(t_win, offset, files):
        currently_displaying = {}
        row = col = 0
        while True:
            if offset + 1 > len(files) or row == THUMBNAILS_PER_PAGE[1]:
                break
            f = files[offset]
            currently_displaying[(row, col)] = f
            try:
                t_win[(row, col)].update(image_data=convert_to_bytes(f, THUMBNAIL_SIZE, True))
            except Exception as e:
                print(f'Error on file: {f}', e)
            col = (col + 1) % THUMBNAILS_PER_PAGE[0]
            if col == 0:
                row += 1

            offset += 1
        if not (row == 0 and col == 0):
            while row != THUMBNAILS_PER_PAGE[1]:
                t_win[(row, col)].update(image_data=sg.DEFAULT_BASE64_ICON)
                currently_displaying[(row, col)] = None
                col = (col + 1) % THUMBNAILS_PER_PAGE[0]
                if col == 0:
                    row += 1

        return offset, currently_displaying

    def main():
        files = [os.path.join(ROOT_FOLDER, f) for f in os.listdir(ROOT_FOLDER) if True in [f.endswith(e) for e in EXTS]]
        files.sort()
        t_win = make_thumbnails(files)
        offset, currently_displaying = display_images(t_win, 0, files)
        # offset = THUMBNAILS_PER_PAGE[0] * THUMBNAILS_PER_PAGE[1]
        # currently_displaying = {}
        while True:
            win, event, values = sg.read_all_windows()
            print(event, values)
            if win == sg.WIN_CLOSED:  # if all windows are closed
                break

            if event == sg.WIN_CLOSED or event == 'Exit':
                break

            if isinstance(event, tuple):
                display_image_window(currently_displaying.get(event))
                continue
            elif event == '-SLIDER-':
                offset = int(values['-SLIDER-'] * len(files) / 100)
                event = '-NEXT-'
            else:
                t_win['-SLIDER-'].update(offset * 100 / len(files))

            if event == '-NEXT-' or event.endswith('Down'):
                offset, currently_displaying = display_images(t_win, offset, files)
            elif event == '-PREV-' or event.endswith('Up'):
                offset -= THUMBNAILS_PER_PAGE[0] * THUMBNAILS_PER_PAGE[1] * 2
                if offset < 0:
                    offset = 0
                offset, currently_displaying = display_images(t_win, offset, files)

    #if __name__ == '__main__':
    main()



# v1

# import GuiAPPs as guiApps
# guiApps.HTMLlikeDesignShow()

# it's not hooked up to real data - it's just a layout
# cool green style

def HTMLlikeDesignShow():
    import PySimpleGUI as sg

    """
        Demo - Resizable Dashboard using Frames

        This Demo Program looks similar to the one based on the Column Element.
        This version has a big difference in how it was implemented and the fact that it can be resized.

        It's a good example of how PySimpleGUI evolves, continuously.  When the original Column-based demo
            was written, none of these techniques such as expansion, were easily programmed.

        Dashboard using blocks of information.

        Copyright 2021 PySimpleGUI.org
    """

    theme_dict = {'BACKGROUND': '#2B475D',
                  'TEXT': '#FFFFFF',
                  'INPUT': '#F2EFE8',
                  'TEXT_INPUT': '#000000',
                  'SCROLL': '#F2EFE8',
                  'BUTTON': ('#000000', '#C2D4D8'),
                  'PROGRESS': ('#FFFFFF', '#C7D5E0'),
                  'BORDER': 0, 'SLIDER_DEPTH': 0, 'PROGRESS_DEPTH': 0}

    sg.theme_add_new('Dashboard', theme_dict)
    sg.theme('Dashboard')

    BORDER_COLOR = '#C7D5E0'
    DARK_HEADER_COLOR = '#1B2838'
    BPAD_TOP = ((20, 20), (20, 10))
    BPAD_LEFT = ((20, 10), (0, 0))
    BPAD_LEFT_INSIDE = (0, (10, 0))
    BPAD_RIGHT = ((10, 20), (10, 0))

    top_banner = [
        [sg.Text('Dashboard', font='Any 20', background_color=DARK_HEADER_COLOR, enable_events=True, grab=False),
         sg.Push(background_color=DARK_HEADER_COLOR),
         sg.Text('Wednesday 27 Oct 2021', font='Any 20', background_color=DARK_HEADER_COLOR)],
    ]

    top = [[sg.Push(), sg.Text('Weather Could Go Here', font='Any 20'), sg.Push()],
           [sg.T('This Frame has a relief while the others do not')],
           [sg.T('This window is resizable (see that sizegrip in the bottom right?)')]]

    block_3 = [[sg.Text('Block 3', font='Any 20')],
               [sg.Input(), sg.Text('Some Text')],
               [sg.T('This frame has element_justification="c"')],
               [sg.Button('Go'), sg.Button('Exit')]]

    block_2 = [[sg.Text('Block 2', font='Any 20')],
               [sg.T('This is some random text')],
               [sg.Image(data=sg.DEFAULT_BASE64_ICON, enable_events=True)]]

    block_4 = [[sg.Text('Block 4', font='Any 20')],
               [sg.T('You can move the window by grabbing this block (and the top banner)')],
               [sg.T('This block is a Column Element')],
               [sg.T('The others are all frames')],
               [sg.T('The Frame Element, with a border_width=0\n    and no title is just like a Column')],
               [sg.T('Frames that have a fixed size \n    handle element_justification better than Columns')]]

    layout = [
        [sg.Frame('', top_banner, pad=(0, 0), background_color=DARK_HEADER_COLOR, expand_x=True, border_width=0,
                  grab=True)],
        [sg.Frame('', top, size=(920, 100), pad=BPAD_TOP, expand_x=True, relief=sg.RELIEF_GROOVE, border_width=3)],
        [sg.Frame('', [[sg.Frame('', block_2, size=(450, 150), pad=BPAD_LEFT_INSIDE, border_width=0, expand_x=True,
                                 expand_y=True, )],
                       [sg.Frame('', block_3, size=(450, 150), pad=BPAD_LEFT_INSIDE, border_width=0, expand_x=True,
                                 expand_y=True, element_justification='c')]],
                  pad=BPAD_LEFT, background_color=BORDER_COLOR, border_width=0, expand_x=True, expand_y=True),
         sg.Column(block_4, size=(450, 320), pad=BPAD_RIGHT, expand_x=True, expand_y=True, grab=True), ],
        [sg.Sizegrip(background_color=BORDER_COLOR)]]

    window = sg.Window('Dashboard PySimpleGUI-Style', layout, margins=(0, 0), background_color=BORDER_COLOR,
                       no_titlebar=True, resizable=True, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_LOC_EXIT)

    while True:  # Event Loop
        event, values = window.read()
        print(event, values)
        if event == sg.WIN_CLOSED or event == 'Exit':
            break
        elif event == 'Edit Me':
            sg.execute_editor(__file__)
        elif event == 'Version':
            sg.popup_scrolled(sg.get_versions(), keep_on_top=True)
        elif event == 'File Location':
            sg.popup_scrolled('This Python file is:', __file__)
    window.close()


# v1

# import GuiAPPs as guiApps
# guiApps.GuiMACLauncherShow()

def GuiMACLauncherShow():
    import PySimpleGUI as sg

    """
        Demo Launcher Bar

        A 2021 version of a PySimpleGUI based launcher.
        Once making the GUI leap, it's hard to go back.... at least for some people.
        This tool will perhaps help make for a more GUI-like environment for your Python activities


        Copyright 2021 PySimpleGUI
    """

    excel_icon = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAACXBIWXMAAAsSAAALEgHS3X78AAAFB0lEQVRIx51We0xTZxQ/X3t5lZY+QLwgLYgg4MSJOAQCOgED23SgMjedr2mY2UQhwblHNpK5xCxTM+Nkf+Dc2NTMZJCpEF3YsqU6y5ZsGpextSD0AcKlBeVR+rrt/fbHhcv1tlTGSdN8j3O/33mfgxiGAR4hhDDG7D/MTgghAGA5+efcCbdAAgA+jGDLYDzuspuGByZck7JwSZYmw/9dARgAEEHE9Hhp08iAftBooEx6ytg1ZB4YtblpDwCsVKe11ZzlC8sJxNmA3c4A0D7vg0fWbqtZP2gyUCYDZTIO97tozyw2mhGce4t9mv86QggxDNOobW69p+219U+4HQEt5k8xMsXGFWv9zzEGDBghFCImSjJyC1KzCISQrufeXYse/g+FikNTYjVBGMac9vorDb8cPU8Ej5ZZNZAqXiuo4Ftf4I/BMds3utYnODkIDYxa6680AEBRek5GfHLDz5fxtGvyU1aWPpUPABgwxnieAMP20fO3vgcAZaSclMd8+esVzhKEWMwCIEDz10ASGp5GJgEAGRUdERqWpU7HMAWwSBE7HUKAECL8U0ytIqVhEqOt30m7AWBLdkmiitR2/XnH/C/HlhKraT38Gbe9dviMf54DIIwxIchABKhxd31mQurbzacvdrQlL0g4ta3O46MvdLTx2fSUMf/4LkBQtbZyXVr2rnPvcRrsWPP8oeIdAAgBIIREgihiMNOobcYYb88pA4CdeRtDiZCLHW3D9lFBklseUpYRasw5QXu97Jr9PXKMY4wBMCAI7OTWv7R1pXsyE5ZmJy17afUGu8vRqG0R8JDy6N15LwJA7pIVMTLlW2V7AYDVYVViOj+TAwDQXu8Xt1o+qqj+eGuNUhJ17mbL0PiIgCcqQlq6PJ9NaVmYhA0bllSRcn49CRxFzX/8VFuyMyMu2eFxNd5s9mfooszFJ6sA4EjpnucyC0pOvc6Z+sC6yg82HeAKqmiWcg8+zCCExCJROBH2xMYgqIOPmSgAB8Ce/PKFUdF3zP9kaTLeWL/t6HefChiWkomf73wfAC+QKmXhkT/WNcKUE5AqMoorfQAQQAN5hLRq7ZZJt7P28gmnx7U1uyQxOk7AM+6cbO/UtXd29Nj67W5He6eO3bZ36rqGzFOKYAjsg32Fm6Oliku/Xe+x9l27p335mdKDRa8IlKDGhj+58RUAHCnbK5dIT/zQNOODZysLU1cBYBzQBwqJbH/BZi/j+1p3FQCabl/1MUzl6g1qFflYuSZC1CpSrSLlEZEhIkKtWshu1SpSESHjcwo1cNGe8rM1YpGoe8gCAH8/uP9Oy+lFytikmPi+hxTHlk4uvl7bwG11716YLQT8Adw91j5+4/729xv+X963WjadOQQAr+a9kL/k6epLx7mCsHlV0f7CLTMazK/hODwutgkWL8t10u67FgP3Ts7i5Xz5AofpXDpaedZ6AMjSpCklUfsKKrirNcmZ/Flmnv0gXhH7YfmbXKIdqzjoNx1NddB5AozYR5tuXw3e9OUS6VQURYSEiUUi39wGFpbcPrrH1j+TsXhqUoLp1kyIiGPlBxE7AdA+78CotXvIwk5wBsrUa+t3etxBAASTnWCg4wcOgTEOERMaVZxGFVeyLJe9o31e88iggTLqB416ytQ1ZH7wyOqi3YLJzn9uFIBhjINN0ZxEDGYmnJPGkQH9YK+BMjs8TrWSrC7ePhdjBgYPuAgyu8/I63f1H5J3l/PVeWn1AAAAAElFTkSuQmCC'

    # This is your master table.... keys are what will be shown on the bar.  The item is what you want to happen.
    launcher_buttons1 = {sg.SYMBOL_DOWN_ARROWHEAD: None,
                         'PSG Main': sg.main,
                         'Word': r"C:\Program Files\Microsoft Office\root\Office16\WINWORD.EXE",
                         excel_icon: r"C:\Program Files\Microsoft Office\root\Office16\excel.EXE",
                         'Notepad++': r"C:\Program Files\NotePad++\notepad++.exe",
                         sg.EMOJI_BASE64_PONDER: sg.main_sdk_help,
                         sg.EMOJI_BASE64_HAPPY_IDEA: r'C:\Python\PycharmProjects\PSG\DemoPrograms\Demo_Desktop_Widget_Postit.py',
                         'All Elements': r'C:\Python\PycharmProjects\PSG\DemoPrograms\Demo_All_Elements.py',
                         'Exit': None}

    launcher_buttons2 = {sg.SYMBOL_DOWN_ARROWHEAD: None,
                         'PSG Main': sg.main,
                         'Exit': None}

    panel_rows = (launcher_buttons1, launcher_buttons2)
    col_panel_list = []
    num_panels = len(panel_rows)
    MINIMIZED_IMAGE = sg.EMOJI_BASE64_HAPPY_THUMBS_UP

    DEFAULT_SCREEN_BACKGROUND_COLOR = 'black'
    DEFAULT_BUTTON_SIZE = (None, None)

    def settings(window: sg.Window):
        layout = [[sg.T(f'Screen size = {sg.Window.get_screen_size()}')],
                  [sg.T(f'Your launcher is currently located at {window.current_location()}')],
                  [sg.T('Enable autosave and position your window where you want it to appear next time you run.')],
                  [sg.T('Your Screen Background Color'),
                   sg.In(sg.user_settings_get_entry('-screen color-', DEFAULT_SCREEN_BACKGROUND_COLOR), s=15,
                         k='-SCREEN COLOR-')],
                  [sg.CBox('Autosave Location on Exit',
                           default=sg.user_settings_get_entry('-auto save location-', True), k='-AUTO SAVE LOCATION-')],
                  [sg.CBox('Keep launcher on top', default=sg.user_settings_get_entry('-keep on top-', True),
                           k='-KEEP ON TOP-')],
                  [sg.CBox('Reroute STDOUT to Debug Window',
                           default=sg.user_settings_get_entry('-reroute stdout-', True), k='-REROUTE STDOUT-')],
                  [sg.OK(), sg.Cancel()]]
        event, values = sg.Window('Settings', layout).read(close=True)
        if event == 'OK':
            sg.user_settings_set_entry('-auto save location-', values['-AUTO SAVE LOCATION-'])
            sg.user_settings_set_entry('-keep on top-', values['-KEEP ON TOP-'])
            sg.user_settings_set_entry('-screen color-', values['-SCREEN COLOR-'])
            sg.user_settings_set_entry('-reroute stdout-', values['-REROUTE STDOUT-'])
            if values['-KEEP ON TOP-']:
                window.keep_on_top_set()
            else:
                window.keep_on_top_clear()

    def ToolButton(item, background, tip):
        if isinstance(item, bytes):
            button = sg.Button(image_data=item, key=item, metadata=launcher_buttons1[item], button_color=background,
                               tooltip=tip, border_width=0,
                               pad=1)
        else:
            button = sg.Button(item, key=item, metadata=launcher_buttons1[item], tooltip=tip, border_width=0, pad=1)
        return button

    def make_window():
        global col_panel_list
        screen_background_color = sg.user_settings_get_entry('-screen color-', None)
        old_bg = sg.theme_background_color()
        sg.set_options(border_width=0, background_color=screen_background_color)
        sg.theme_background_color(screen_background_color)
        col_panel_list = []
        for count, launcher_buttons in enumerate(panel_rows):
            button_row = []
            for item in launcher_buttons.keys():
                tip = 'Grab anywhere to move the launcher\nClick an item to launch something\nRight Click to get to settings'
                button = ToolButton(item, screen_background_color, tip)
                button_row.append(button)
            col_panel_list.append(button_row)

        col_up_down = sg.Col([[sg.B(sg.SYMBOL_UP, button_color=screen_background_color)],
                              [sg.B(sg.SYMBOL_DOWN, button_color=screen_background_color)]], p=0, k='-COL UP DOWN-')
        col_buttons = sg.Column([col_panel_list[0], ], p=0, k='-BUTTON COL-', visible=True)
        col_buttons2 = sg.Column([col_panel_list[1], ], p=0, k='-BUTTON COL2-', visible=False, )
        col_minimized = sg.Column([[sg.Button(image_data=MINIMIZED_IMAGE, k='-MINIMIZED IMAGE-',
                                              button_color=screen_background_color, border_width=0)]], visible=False,
                                  k='-MINIMIZED COL-')
        col_panel_list = [col_buttons, col_buttons2, col_up_down]
        layout = [[sg.pin(col_minimized), sg.pin(col_up_down), sg.pin(col_buttons), sg.pin(col_buttons2), ]]

        screen_size = sg.Window.get_screen_size()
        location = screen_size[0] // 2, screen_size[
            1] - 200  # set a default location centered and near the bottom of the screen
        location = sg.user_settings_get_entry('-window location-', location)
        keep_on_top = sg.user_settings_get_entry('-keep on top-', True)

        window = sg.Window('Window Title', layout, location=location,
                           keep_on_top=keep_on_top, no_titlebar=True, grab_anywhere=True,
                           background_color=screen_background_color,
                           auto_size_buttons=True, default_button_element_size=DEFAULT_BUTTON_SIZE,
                           right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_SETTINGS_EXIT,
                           enable_close_attempted_event=True, use_default_focus=False,
                           transparent_color=screen_background_color)
        sg.theme_background_color(old_bg)

        return window, col_panel_list

    def main():
        if sg.user_settings_get_entry('-reroute stdout-', False):
            mprint = sg.Print
        else:
            mprint = print
        window, col_panel_list = make_window()
        cur_panel = col_panel_list[0]
        count = 0
        while True:
            event, values = window.read(timeout=1000)  # Not needed but handy while debugging
            if event != sg.TIMEOUT_EVENT:
                mprint(event, values)
            else:
                continue
            if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit', sg.WIN_CLOSED) or str(event).startswith('Exit'):
                if event != sg.WIN_CLOSED:
                    if sg.user_settings_get_entry('-auto save location-', True):
                        mprint('saving location', window.current_location())
                        sg.user_settings_set_entry('-window location-', window.current_location())
                break
            try:
                elem = window.find_element(event, silent_on_error=True)
                if elem:
                    action = elem.metadata
            except:
                action = None
            if action is not None:
                if isinstance(action, str):
                    if action.endswith(('.py', '.pyw')):
                        sg.execute_py_file(action)
                    else:
                        sg.execute_command_subprocess(action)
                elif callable(action):
                    action()
            event = str(event)
            if event == 'Edit Me':
                sg.execute_editor(__file__)
            elif event == 'Version':
                sg.popup_scrolled(sg.get_versions())
            elif event == 'Settings':
                settings(window)
                window.close()
                window, col_panel_list = make_window()
                if sg.user_settings_get_entry('-reroute stdout-', False):
                    mprint = sg.Print
                else:
                    mprint = print
            elif event.startswith(sg.SYMBOL_DOWN_ARROWHEAD):
                window['-BUTTON COL-'].update(visible=False)
                window['-BUTTON COL2-'].update(visible=False)
                window['-BUTTON COL2-'].update(visible=False)
                window['-COL UP DOWN-'].update(visible=False)
                window['-MINIMIZED COL-'].update(visible=True)
                cur_panel = col_panel_list[count]
            elif event == '-MINIMIZED IMAGE-':
                cur_panel.update(visible=True)
                window['-MINIMIZED COL-'].update(visible=False)
                window['-COL UP DOWN-'].update(visible=True)
            elif event.startswith(sg.SYMBOL_UP):
                cur_panel = col_panel_list[count]
                cur_panel.update(visible=False)
                count = (count + (num_panels - 1)) % num_panels  # Decrement - roll over to MAX from 0
                cur_panel = col_panel_list[count]
                cur_panel.update(visible=True)
            elif event == sg.SYMBOL_DOWN:
                cur_panel = col_panel_list[count]
                cur_panel.update(visible=False)
                count = (count + 1) % num_panels  # Increment to MAX then roll over to 0
                cur_panel = col_panel_list[count]
                cur_panel.update(visible=True)
        window.close()

    #if __name__ == '__main__':
    main()




# v1

# import GuiAPPs as guiApps
# guiApps.GuiSplashSCREENshow()

# you can change settings - with the right click menu
# you can save the location for next time you open it

def GuiSplashSCREENshow():
    import PySimpleGUI as sg

    """
        Demo - Splash Screen

        Displays a PNG image with transparent areas as see-through on the center
        of the screen for a set amount of time.

        Copyright 2020 PySimpleGUI.org
    """

    image = b''

    FILENAME = r'yourfile.png'  # if you want to use a file instead of data, then use this in Image Element
    DISPLAY_TIME_MILLISECONDS = 4000

    sg.Window('Window Title', [[sg.Image(data=image)]], transparent_color=sg.theme_background_color(), no_titlebar=True,
              keep_on_top=True).read(timeout=DISPLAY_TIME_MILLISECONDS, close=True)



# v1

# import GuiAPPs as guiApps
# guiApps.GuiTIMERshow()

def GuiTIMERshow():
    import PySimpleGUI as sg
    # ----------- Window's Layout -----------
    layout = [[sg.Column([[sg.Text(size=(4, 1), justification='center', font='Courier 20', key='-OUT-')],
                          [sg.Input(size=(4, 1), key='-IN-')],
                          [sg.Button('Set')],
                          [sg.Button('Start')]], element_justification='center')]]
    # ----------- Create Window -----------
    window = sg.Window('Countdown Timer', layout, auto_size_buttons=False)
    # ----------- Event Loop -----------
    amount = 0
    while True:
        event, values = window.read(timeout=1000 if amount else None)
        if event is None:
            break
        elif event == 'Set':
            window['-OUT-'].update(values['-IN-'])
        elif event == 'Start':
            amount = int(values['-IN-'])
        if amount:
            amount -= 1
            window['-OUT-'].update(amount)
    # ----------- Exiting - close window -----------
    window.close()



# v1

# import GuiAPPs as guiApps
# guiApps.GuiWEATHERshow()

# it's not hooked up to real data - it's just a layout
# cool green style

def GuiWEATHERshow():
    import PySimpleGUI as sg
    import datetime
    import base64
    from urllib import request
    import json
    import sys
    import webbrowser

    """
        A Current Weather Widget
        Adapted from the weather widget originally created and published by Israel Dryer that you'll find here:
        https://github.com/israel-dryer/Weather-App
        BIG THANKS goes out for creating a good starting point for other widgets to be build from.
        A true "Template" is being developed that is a little more abstracted to make creating your own
        widgets easy.  Things like the settings window is being standardized, the settings file format too.
        You will need a key (APPID) from OpenWeathermap.org in order to run this widget. It's free, it's easy:
        https://home.openweathermap.org/
        Your initial location is determined using your IP address and will be used if no settings file is found
        This widget is an early version of a PSG Widget so it may not share the same names / constructs as the templates. 
        Copyright 2020 PySimpleGUI - www.PySimpleGUI.com
    """

    SETTINGS_PATH = None  # use the default settings path (OS settings foloder)

    API_KEY = '95fbd4757a377fbc9b245a0edfd502cd'  # Set using the "Settings" window and saved in your config file

    sg.theme('Light Green 6')
    ALPHA = 0.8

    BG_COLOR = sg.theme_text_color()
    TXT_COLOR = sg.theme_background_color()

    APP_DATA = {
        'City': 'New York',
        'Country': 'US',
        'Postal': 10001,
        'Description': 'clear skys',
        'Temp': 101.0,
        'Feels Like': 72.0,
        'Wind': 0.0,
        'Humidity': 0,
        'Precip 1hr': 0.0,
        'Pressure': 0,
        'Updated': 'Not yet updated',
        'Icon': None,
        'Units': 'Imperial'
    }

    def load_settings():
        global API_KEY
        settings = sg.UserSettings(path=SETTINGS_PATH)
        API_KEY = settings['-api key-']
        if not API_KEY:
            sg.popup_quick_message('No valid API key found... opening setup window...', keep_on_top=True,
                                   background_color='red', text_color='white', auto_close_duration=3,
                                   non_blocking=False, location=win_location)
            change_settings(settings)
        return settings

    def change_settings(settings, window_location=(None, None)):
        global APP_DATA, API_KEY

        try:
            nearest_postal = json.loads(request.urlopen('http://ipapi.co/json').read())['postal']
        except Exception as e:
            print('Error getting nearest postal', e)
            nearest_postal = ''

        layout = [[sg.T('Enter Zipcode or City for your location')],
                  [sg.I(settings.get('-location-', nearest_postal), size=(15, 1), key='-LOCATION-')],
                  [sg.I(settings.get('-api key-', ''), size=(32, 1), key='-API KEY-')],
                  [sg.B('Ok', border_width=0, bind_return_key=True),
                   sg.B('Register For a Key', border_width=0, k='-REGISTER-'), sg.B('Cancel', border_width=0)], ]

        window = sg.Window('Settings', layout, location=window_location, no_titlebar=True, keep_on_top=True,
                           border_depth=0)
        event, values = window.read()
        window.close()

        if event == '-REGISTER-':
            sg.popup(
                'Launching browser so you can signup for the "Current Weather" service from OpenWeatherMap.org to get a Free API Key',
                'Click OK and your browser will open', r'Visit https://home.openweathermap.org/ for more information',
                location=window_location)
            # Register to get a free key
            webbrowser.open(r'https://home.openweathermap.org/users/sign_up')

        if event == 'Ok':
            user_location = settings['-location-'] = values['-LOCATION-']
            API_KEY = settings['-api key-'] = values['-API KEY-']
        else:
            API_KEY = settings['-api key-']
            user_location = settings['-location-']

        if user_location is not None:
            if user_location.isnumeric() and len(user_location) == 5 and user_location is not None:
                APP_DATA['Postal'] = user_location
                APP_DATA['City'] = ''
            else:
                APP_DATA['City'] = user_location
                APP_DATA['Postal'] = ''

        return settings

    def update_weather():
        if APP_DATA['City']:
            request_weather_data(create_endpoint(2))
        elif APP_DATA['Postal']:
            request_weather_data(create_endpoint(1))

    def create_endpoint(endpoint_type=0):
        """ Create the api request endpoint
        {0: default, 1: zipcode, 2: city_name}"""
        if endpoint_type == 1:
            try:
                endpoint = f"http://api.openweathermap.org/data/2.5/weather?zip={APP_DATA['Postal']},us&appid={API_KEY}&units={APP_DATA['Units']}"
                return endpoint
            except ConnectionError:
                return
        elif endpoint_type == 2:
            try:
                endpoint = f"http://api.openweathermap.org/data/2.5/weather?q={APP_DATA['City'].replace(' ', '%20')},us&APPID={API_KEY}&units={APP_DATA['Units']}"
                return endpoint
            except ConnectionError:
                return
        else:
            return

    def request_weather_data(endpoint):
        """ Send request for updated weather data """
        global APP_DATA

        if endpoint is None:
            sg.popup_error('Could not connect to api.  endpoint is None', keep_on_top=True, location=win_location)
            return
        else:
            try:
                response = request.urlopen(endpoint)
            except request.HTTPError:
                sg.popup_error('ERROR Obtaining Weather Data',
                               'Is your API Key set correctly?',
                               API_KEY, keep_on_top=True, location=win_location)
                return

        if response.reason == 'OK':
            weather = json.loads(response.read())
            APP_DATA['City'] = weather['name'].title()
            APP_DATA['Description'] = weather['weather'][0]['description']
            APP_DATA['Temp'] = "{:,.0f}°F".format(weather['main']['temp'])
            APP_DATA['Humidity'] = "{:,d}%".format(weather['main']['humidity'])
            APP_DATA['Pressure'] = "{:,d} hPa".format(weather['main']['pressure'])
            APP_DATA['Feels Like'] = "{:,.0f}°F".format(weather['main']['feels_like'])
            APP_DATA['Wind'] = "{:,.1f} m/h".format(weather['wind']['speed'])
            APP_DATA['Precip 1hr'] = None if not weather.get('rain') else "{:2} mm".format(weather['rain']['1h'])
            APP_DATA['Updated'] = 'Updated: ' + datetime.datetime.now().strftime("%B %d %I:%M:%S %p")
            APP_DATA['Lon'] = weather['coord']['lon']
            APP_DATA['Lat'] = weather['coord']['lat']

            icon_url = "http://openweathermap.org/img/wn/{}@2x.png".format(weather['weather'][0]['icon'])
            APP_DATA['Icon'] = base64.b64encode(request.urlopen(icon_url).read())

    def metric_row(metric):
        """ Return a pair of labels for each metric """
        return [sg.Text(metric, font=('Arial', 10), pad=(15, 0), size=(9, 1)),
                sg.Text(APP_DATA[metric], font=('Arial', 10, 'bold'), pad=(0, 0), size=(9, 1), key=metric)]

    def create_window(win_location):
        """ Create the application window """
        col1 = sg.Column(
            [[sg.Text(APP_DATA['City'], font=('Arial Rounded MT Bold', 18), pad=((10, 0), (50, 0)), size=(18, 1),
                      background_color=BG_COLOR, text_color=TXT_COLOR, key='City')],
             [sg.Text(APP_DATA['Description'], font=('Arial', 12), pad=(10, 0), background_color=BG_COLOR,
                      text_color=TXT_COLOR, key='Description')]],
            background_color=BG_COLOR, key='COL1')

        col2 = sg.Column(
            [[sg.Text('×', font=('Arial Black', 16), pad=(0, 0), justification='right', background_color=BG_COLOR,
                      text_color=TXT_COLOR, enable_events=True, key='-QUIT-')],
             [sg.Image(data=APP_DATA['Icon'], pad=((5, 10), (0, 0)), size=(100, 100), background_color=BG_COLOR,
                       key='Icon')]],
            element_justification='center', background_color=BG_COLOR, key='COL2')

        col3 = sg.Column(
            [[sg.Text(APP_DATA['Updated'], font=('Arial', 8), background_color=BG_COLOR, text_color=TXT_COLOR,
                      key='Updated')]],
            pad=(10, 5), element_justification='left', background_color=BG_COLOR, key='COL3')

        col4 = sg.Column(
            [[sg.Text('Settings', font=('Arial', 8, 'italic'), background_color=BG_COLOR, text_color=TXT_COLOR,
                      enable_events=True, key='-CHANGE-'),
              sg.Text('Refresh', font=('Arial', 8, 'italic'), background_color=BG_COLOR, text_color=TXT_COLOR,
                      enable_events=True, key='-REFRESH-')]],
            pad=(10, 5), element_justification='right', background_color=BG_COLOR, key='COL4')

        top_col = sg.Column([[col1, col2]], pad=(0, 0), background_color=BG_COLOR, key='TopCOL')

        bot_col = sg.Column([[col3, col4]], pad=(0, 0), background_color=BG_COLOR, key='BotCOL')

        lf_col = sg.Column(
            [[sg.Text(APP_DATA['Temp'], font=('Haettenschweiler', 90), pad=((10, 0), (0, 0)), justification='center',
                      key='Temp')]],
            pad=(10, 0), element_justification='center', key='LfCOL')

        rt_col = sg.Column(
            [metric_row('Feels Like'), metric_row('Wind'), metric_row('Humidity'), metric_row('Precip 1hr'),
             metric_row('Pressure')],
            pad=((15, 0), (25, 5)), key='RtCOL')

        layout = [[top_col],
                  [lf_col, rt_col],
                  [bot_col]]

        window = sg.Window(layout=layout, title='Weather Widget', margins=(0, 0), finalize=True, location=win_location,
                           element_justification='center', keep_on_top=True, no_titlebar=True, grab_anywhere=True,
                           alpha_channel=ALPHA,
                           right_click_menu=[[''], 'Exit'])

        for col in ['COL1', 'COL2', 'TopCOL', 'BotCOL', '-QUIT-']:
            window[col].expand(expand_y=True, expand_x=True)

        for col in ['COL3', 'COL4', 'LfCOL', 'RtCOL']:
            window[col].expand(expand_x=True)

        window['-CHANGE-'].set_cursor('hand2')
        window['-QUIT-'].set_cursor('hand2')
        window['-REFRESH-'].set_cursor('hand2')

        return window

    def update_metrics(window):
        """ Adjust the GUI to reflect the current weather metrics """
        metrics = ['City', 'Temp', 'Feels Like', 'Wind', 'Humidity', 'Precip 1hr',
                   'Description', 'Icon', 'Pressure', 'Updated']
        for metric in metrics:
            if metric == 'Icon':
                window[metric].update(data=APP_DATA[metric])
            else:
                window[metric].update(APP_DATA[metric])

    def main(refresh_rate, win_location):
        """ The main program routine """
        refresh_in_milliseconds = refresh_rate * 60 * 1000

        # Load settings from config file. If none found will create one
        settings = load_settings()
        location = settings['-location-']
        if location is not None:
            if location.isnumeric() and len(location) == 5 and location is not None:
                APP_DATA['Postal'] = location
                APP_DATA['City'] = ''
            else:
                APP_DATA['City'] = location
                APP_DATA['Postal'] = ''
            update_weather()
        else:
            sg.popup_error('Having trouble with location.  Your location: ', location)
            exit()

        window = create_window(win_location)

        while True:  # Event Loop
            event, values = window.read(timeout=refresh_in_milliseconds)
            if event in (None, '-QUIT-', 'Exit'):
                break
            if event == '-CHANGE-':
                x, y = window.current_location()
                settings = change_settings(settings, (x + 200, y + 50))
            elif event == '-REFRESH-':
                sg.popup_quick_message('Refreshing...', keep_on_top=True, background_color='red', text_color='white',
                                       auto_close_duration=3, non_blocking=False,
                                       location=(win_location[0] + 170, win_location[1] + 150))
            elif event != sg.TIMEOUT_KEY:
                sg.Print('Unknown event received\nEvent & values:\n', event, values, location=win_location)

            update_weather()
            update_metrics(window)
        window.close()

    #if __name__ == '__main__':
    if len(sys.argv) > 1:
        win_location = sys.argv[1].split(',')
        win_location = (int(win_location[0]), int(win_location[1]))
    else:
        win_location = (None, None)
    main(refresh_rate=1, win_location=win_location)



# v1

# import GuiAPPs as guiApps
# GuiWindowLAYOUTSshow() #cycles thru them as you close them

def GuiWindowLAYOUTSshow():
    import PySimpleGUI as sg

    """
        PySimpleGUI is designed & authored in Python to take full advantage the awesome Python constructs & capabilities.
        Layouts are represented as lists to PySimpleGUI. Lists are fundamental in Python and have a number of powerful
        capabilities that PySimpleGUI exploits.

        Many times PySimpleGUI programs can benefit from using CODE to GENERATE your layouts.  This Demo illustrates
        a number of ways of "building" a layout. Some work on 3.5 and up.  Some are basic and show concatenation of rows
        to build up a layout.  Some utilize generators.

        These 8 "Constructs" or Design Patterns demonstrate numerous ways of "generating" or building your layouts
        0 - A simple list comprehension to build a row of buttons
        1 - A simple list comprehension to build a column of buttons
        2 - Concatenation of rows within a layout
        3 - Concatenation of 2 complete layouts [[ ]] + [[ ]] = [[ ]]
        4 - Concatenation of elements to form a single row [ [] + [] + [] ] = [[ ]]
        5 - Questionnaire - Using a double list comprehension to build both rows and columns in a single line of code
        6 - Questionnaire - Unwinding the comprehensions into 2 for loops instead
        7 - Using the * operator to unpack generated items onto a single row 
        8 - Multiple Choice Test - a practical use showing list comprehension and concatenated layout
    """

    """
        Construct #0 - List comprehension to generate a row of Buttons

        Comprehensions are super-powers of Python.  In this example we're using a comprehension to create 4 buttons that
        are all on the same row.
    """

    def layout0():
        layout = [[sg.Button(i) for i in range(4)]]  # A list of buttons is created

        window = sg.Window('Generated Layouts', layout)

        event, values = window.read()

        print(event, values)
        window.close()

    """
        Construct #1 - List comprehension to generate a Column of Buttons

        More list super-power, this time used to build a series of buttons doing DOWN the window instead of across

    """

    def layout1():
        # a List of lists of buttons.  Notice the ] after Button
        layout = [[sg.Button(i)] for i in range(4)]

        window = sg.Window('Generated Layouts', layout)

        event, values = window.read()

        print(event, values)
        window.close()

    """
        Construct #2 - List comprehension to generate a row of Buttons and concatenation of more lines of elements

        Comprehensions are super-powers of Python.  In this example we're using a comprehension to create 4 buttons that
        are all on the same row, just like the previous example.
        However, here, we want to not just have a row of buttons, we want have an OK button at the bottom.
        To do this, you "add" the rest of the GUI layout onto the end of the generated part.

        Note - you can't end the layout line after the +. If you wanted to put the OK button on the next line, you need
        to add a \ at the end of the first line.
        See next Construct on how to not use a \ that also results in a VISUALLY similar to a norma layout
    """

    def layout2():
        # if want to split, can't add newline after + to do it
        layout = [[sg.Button(i) for i in range(4)]] + [[sg.OK()]]

        window = sg.Window('Generated Layouts', layout)

        event, values = window.read()

        print(event, values)
        window.close()

    """
        Construct # 3 - Adding together what appears to be 2 layouts

        Same as layout2, except that the OK button is put on another line without using a \ so that the layout appears to
        look like a normal, multiline layout without a \ at the end

        Also shown is the OLD tried and true way, using layout.append.  You will see the append technique in many of the
        Demo programs and probably elsewhere.  Hoping to remove these and instead use this more explicit method of +=.

        Using the + operator, as you've already seen, can be used in the middle of the layout.  A call to append you cannot
        use this way because it modifies the layout list directly.
    """

    def layout3():
        # in terms of formatting, the layout to the RIGHT of the = sign looks like a 2-line GUI (ignore the layout +=
        layout = [[sg.Button(i) for i in range(4)]]
        # this row is better than, but is the same as
        layout += [[sg.OK()]]
        # .. this row in that they both add a new ROW with a button on it
        layout.append([sg.Cancel()])

        window = sg.Window('Generated Layouts', layout)

        event, values = window.read()

        print(event, values)
        window.close()

    """
        Construct 4 - Using + to place Elements on the same row

        If you want to put elements on the same row, you can simply add them together.  All that is happening is that the
        items in one list are added to the items in another.  That's true for all these contructs using +
    """

    def layout4():
        layout = [[sg.Text('Enter some info')] + [sg.Input()] + [sg.Exit()]]

        window = sg.Window('Generated Layouts', layout)

        event, values = window.read()

        print(event, values)
        window.close()

    """
        Construct #5 - Simple "concatenation" of layouts
        Layouts are lists of lists.  Some of the examples and demo programs use a .append method to add rows to layouts.
        These will soono be replaced with this new technique.  It's so simple that I don't know why it took so long to
        find it.
        This layout uses list comprehensions heavily, and even uses 2 of them. So, if you find them confusing, skip down
        to the next Construct and you'll see the same layout built except for loops are used rather than comprehensions

        The next 3 examples all use this same window that is layed out like this:
            Each row is:
        Text1, Text2, Radio1, Radio2, Radio3, Radio4, Radio5
        Text1, Text2, Radio1, Radio2, Radio3, Radio4, Radio5
        ...

        It shows, in particular, this handy bit of layout building, a += to add on additional rows.
        layout =  [[stuff on row 1], [stuff on row 2]]
        layout += [[stuff on row 3]]

        Works as long as the things you are adding together look like this [[ ]]  (the famous double bracket layouts of PSG)
    """

    def layout5():
        questions = ('Managing your day-to-day life', 'Coping with problems in your life?', 'Concentrating?',
                     'Get along with people in your family?', 'Get along with people outside your family?',
                     'Get along well in social situations?', 'Feel close to another person',
                     'Feel like you had someone to turn to if you needed help?', 'Felt confident in yourself?')

        layout = [[sg.Text(qnum + 1, size=(2, 2)), sg.Text(q, size=(30, 2))] +
                  [sg.Radio('', group_id=qnum, size=(7, 2),
                            key=(qnum, col)) for col in range(5)]
                  for qnum, q in enumerate(questions)]
        layout += [[sg.OK()]]

        window = sg.Window('Computed Layout Questionnaire', layout)
        event, values = window.read()

        print(event, values)
        window.close()

    """
        Construct #6 - Computed layout without using list comprehensions
        This layout is identical to Contruct #5.  The difference is that rather than use list comprehensions, this code
        uses for loops.  Perhaps if you're a beginner this version makes more sense?

        In this example we start with a "blank layout" [[ ]] and add onto it.

        Works as long as the things you are adding together look like this [[ ]]  (the famous double bracket layouts of PSG)
    """

    def layout6():
        questions = ('Managing your day-to-day life', 'Coping with problems in your life?', 'Concentrating?',
                     'Get along with people in your family?', 'Get along with people outside your family?',
                     'Get along well in social situations?', 'Feel close to another person',
                     'Feel like you had someone to turn to if you needed help?', 'Felt confident in yourself?')

        layout = [[]]
        for qnum, question in enumerate(questions):
            # rows start with # and question
            row_layout = [sg.Text(qnum + 1, size=(2, 2)),
                          sg.Text(question, size=(30, 2))]

            # loop through 5 radio buttons and add to row
            for radio_num in range(5):
                row_layout += [sg.Radio('', group_id=qnum,
                                        size=(7, 2), key=(qnum, radio_num))]
            # after row is completed layout, tack it onto the end of final layout
            layout += [row_layout]

        # and finally, add a row to the bottom that has an OK button
        layout += [[sg.OK()]]

        window = sg.Window('Computed Layout Questionnaire', layout)
        event, values = window.read()

        print(event, values)
        window.close()

    """
        Construct #7 - * operator and list comprehensions 
            Using the * operator from inside the layout
            List comprehension inside the layout
            Addition of rows to layouts
            All in a single variable assignment

        NOTE - this particular code, using the * operator, will not work on Python 2 and think it was added in Python 3.5

        This code shows a bunch of questions with Radio Button choices

        There is a double-loop comprehension used.  One that loops through the questions (rows) and the other loops through
        the Radio Button choices.
        Thus each row is:
        Text1, Text2, Radio1, Radio2, Radio3, Radio4, Radio5
        Text1, Text2, Radio1, Radio2, Radio3, Radio4, Radio5
        Text1, Text2, Radio1, Radio2, Radio3, Radio4, Radio5

        What the * operator is doing in these cases is expanding the list they are in front of into a SERIES of items
        from the list... one after another, as if they are separated with comma.  It's a way of "unpacking" from within
        a statement.

        The result is a beautifully compact way to make a layout, still using a layout variable, that consists of a
        variable number of rows and a variable number of columns in each row.
    """

    def layout7():
        questions = ('Managing your day-to-day life', 'Coping with problems in your life?', 'Concentrating?',
                     'Get along with people in your family?', 'Get along with people outside your family?',
                     'Get along well in social situations?', 'Feel close to another person',
                     'Feel like you had someone to turn to if you needed help?', 'Felt confident in yourself?')

        # These are the question # and the question text
        layout = [[*[sg.Text(qnum + 1, size=(2, 2)), sg.Text(q, size=(30, 2))],
                   # finally add an OK button at the very bottom by using the '+' operator
                   *[sg.Radio('', group_id=qnum, size=(7, 2), key=(qnum, col)) for col in range(5)]] for qnum, q in
                  enumerate(questions)] + [[sg.OK()]]

        window = sg.Window('Questionnaire', layout)

        event, values = window.read()

        print(event, values)
        window.close()

    """
        Construct #8 - Computed layout using list comprehension and concatenation
        This layout shows one practical use, a multiple choice test.  It's been left parse as to focus on the generation
        part of the program.  For example, default keys are used on the Radio elements.  In reality you would likely
        use a tuple of the question number and the answer number.

        In this example we start with a "Header" Text element and build from there.
    """

    def layout8():
        # The questions and answers
        q_and_a = [
            ['1. What is the thing that makes light in our solar system',
             ['A. The Moon', 'B. Jupiter', 'C. I dunno']],
            ['2. What is Pluto', ['A. The 9th planet', 'B. A dwarf-planet',
                                  'C. The 8th planet', 'D. Goofies pet dog']],
            ['3. When did man step foot on the moon', ['A. 1969', 'B. 1960', 'C. 1970', 'D. 1869']], ]

        # make Header larger
        layout = [[sg.Text('Astronomy Quiz #1', font='ANY 15', size=(30, 2))]]

        # "generate" the layout for the window based on the Question and Answer information
        for qa in q_and_a:
            q = qa[0]
            a_list = qa[1]
            layout += [[sg.Text(q)]] + [[sg.Radio(a, group_id=q)]
                                        for a in a_list] + [[sg.Text('_' * 50)]]

        layout += [[sg.Button('Submit Answers', key='SUBMIT')]]

        window = sg.Window('Multiple Choice Test', layout)

        while True:  # Event Loop
            event, values = window.read()
            if event in (sg.WIN_CLOSED, 'SUBMIT'):
                break
        sg.popup('The answers submitted were', values)
        window.close()

    # ------------------------- Call each of the Constructs -------------------------

    """
    A bunch of window layouts
    even you can give quizzes
    big questionaires as well
    """
    layout0()
    layout1()
    layout2()
    layout3()
    layout4()
    layout5()
    layout6()
    layout7()
    layout8()


#v1

# import GuiAPPs as guiApps
# guiApps.GuiWithImageBUTTONSshow()

def GuiWithImageBUTTONSshow():
    import PySimpleGUI as sg
    import io
    from PIL import Image
    import base64

    """
    Shows some fancy button graphics with the help of PIL
    Usually when you create Base64 buttons to embed in your PySimpleGUI code, you make the exactly the correct size.  Resizing isn't an option when
        using the tkinter version of PySimpleGUI (except for crude "Scaling")
    The PIL code resizes the button images prior to creating the sg.B
    """


    DEF_BUTTON_COLOR = ('white', 'black')


    def resize_base64_image(image64, size):
        '''
        May not be the original purpose, but this code is being used to resize an image for use with PySimpleGUI (tkinter) button graphics
        :param image64: (str) The Base64 image
        :param size: Tuple[int, int] Size to make the image in pixels (width, height)
        :return: (str) A new Base64 image
        '''
        image_file = io.BytesIO(base64.b64decode(image64))
        img = Image.open(image_file)
        img.thumbnail(size, Image.ANTIALIAS)
        bio = io.BytesIO()
        img.save(bio, format='PNG')
        imgbytes = bio.getvalue()
        return imgbytes


    def GraphicButton(text, key, image_data, color=DEF_BUTTON_COLOR, size=(100, 50)):
        '''
        A user defined element.  Use this function inside of your layouts as if it were a Button element (it IS a Button Element)
        Only 3 parameters are required.
        :param text: (str) Text you want to display on the button
        :param key:  (Any) The key for the button
        :param image_data: (str) The Base64 image to use on the button
        :param color: Tuple[str, str] Button color
        :param size: Tuple[int, int] Size of the button to display in pixels (width, height)
        :return: (PySimpleGUI.Button) A button with a resized Base64 image applied to it
        '''
        return sg.Button(text, image_data=resize_base64_image(image_data, size), button_color=color, font='Any 15', pad=(0, 0), key=key, border_width=0)


    def ShowMeTheButtons():

        sg.theme('Black')

        frame_layout = [[sg.Text('Who says Windows have to be ugly when using tkinter?', size=(45, 3))],
                        [sg.Text(
                            'All of these buttons are part of the code itself', size=(45, 2))],
                        [GraphicButton('Next', '-NEXT-', button64),
                            GraphicButton('Submit', '-SUBMIT-', red_pill64),
                            GraphicButton('OK', '-OK-', green_pill64),
                            GraphicButton('Exit', '-EXIT-', orange64)], ]

        layout = [[sg.Frame('Nice Buttons', frame_layout, font=(
            'any 18'), background_color='black')]]

        window = sg.Window('Demo of Nice Looking Buttons', layout,
                           grab_anywhere=True,
                           keep_on_top=True,
                           no_titlebar=True,
                           use_default_focus=False,
                           font='any 15',
                           background_color='black')

        # ---===--- The event loop --- #
        while True:
            event, values = window.read()
            print(event)
            if event in ('-EXIT-', None):   # Exit button or X
                break


    #if __name__ == '__main__':

    # To convert your images, use the PySimpleGUI program - Demo_Base64_Image_Encoder.py located on the GitHub (http://www.PySimpleGUI.com)

    orange64 = 'iVBORw0KGgoAAAANSUhEUgAAAiIAAADLCAMAAABkvgh7AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAANtvJ99sId5tIt5uI91tJNxuJNxuJttvKN90NN91Ntt3PN52ONx3Otx3PNt4Pdp4Ptx4PepfD+pfEOtgD+piD+tkD+ttD+dnFOdoE+doFOVoFuNqG+JrHOFrHuFsHuRpGORpGuRqGORqGupgEOpiEOpkEOlmEOhnEupoEOpoEupqFettEetsF+tuFOxqFetrGOtsGetvHOxrGOxsGOxtGuxuG+xuHexxFutwH+xxGOxyGOxyGuxxHuBsIOJvJ+NvKORvKONwKeNwKuJxLONyLeJyLuRwKeRwKuRxLOtxIexyIexzJOx0JOx1Ju11KOx2KOx2Kux5Iux4Kux5Le1/LeFyMOFzMuB0NOB1Nux7MOx8MOx8Mu19NO1+NO1+Ntd7RdV8RtN+S9J/TdF/TtV9SNR9Stl5QNl6Qdh6Qth7RK+Tfa+Tfq6Ufr+JZb+JZr+KZ7uMbr6KaL6LaryMbLyNb7yOb7WPdLuNcLqOcLmOcrmPdLOQd7SQdrKReLKRerGSerCTfLCTfrmQde2AN+2AOO2BOu2COu6DPO6EPe6EPsWDV8OFXcOFXsOGXcOGXsaDWMSEWsqCVs+AUM2AUs6CU82CVMqDWMmEWtCAT9CAUMKHYMCIYsCIZMCKZu6FQO6GQe6GQu6HRO6IRe6JRu6KR+6KSO+LSu+MS++MTO+OTe+OTu+OUO+RUu+TVfCNTvCOTvCPUPCQUfCQUvCSU/CRVPCSVPCSVvCUV/CUWPCVWvGWWvGXXPGYXvCWYPGaYfGcYvGcZPKdZvKeZ/GdavKeaPKebfKebvKgavKhbPKibfGibvKjcPGkcfKmdPKiePOod/OpePSpePSqevSrfPSsfPSsfvSqg/SugfWwgvWwhPWyhfWyhvWxi/Wyj/W0ifW2jfa4j/a1kPW2kva2lfW2lvW4kPa6kfa7kva5lvW7lPa8lPW8lve+l/a4mva5nPa6nPa7nva+mPa+mva/nPa8oPa9ovbAm/bAnfXAnvbCofbEo/XGp/bGqPbIqQAAAC/NnaUAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGHRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4xLjFjKpxLAAAJXElEQVR4Xu3de3zVdR3H8Xb9/sJh60LlOTtubdIZEyckSdedMzkdZyRGIePmZdqki8s0KllJmtGCTAXRlUAyrireUeZga2JRkooYRWR0JbXMLsIqZ5fT7/L5nRvj9/md0/fhw/Px/fyHP+D33fb4vPj+LvsxXpMA8IREgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgJF7Ih1Xf3bVsuu/AYXu+mUrL+u8iqbqIcdErvhme0V8SjQCIpwWe+0nli+k2R5NTolc0jYzqpQBcigV+UDltZ57SQ6JfLqyRRXRyiCIis7u7qAhj8B3Ip1tLdg/pFLR0Z+hOR/JbyIrWxGIZCp289E2Ep+J3HzEFqLKy0qhUJUfeUkZnf8lGnYWX4l0tDfTOg5VEqoJNNTXh6EgmaMLBKuaymmcJFLRSfPO5CuRtgitYisPBehDQUFrqC3O2EtUxRdo4Bn8JHJhlNawlNZh85Aj2JQeiRp9JY08nY9Euk+nFUwq1ECLgww1ZTRaS+R8mnk6PpEF8dTDkNIgLQxiHFdNw7U0d9PU07CJdLw+tRUVpy5Cxo19+bz9lYI+n5cNfdhcjWGZf2jsCTTJcDiUmnBR/HKaewqbSHfqQqSJrkLGvuuctZu3jOgBD1u99B7Fg6a+Vwrrk8kNfRX+0XE2+qg527adsc38M723d01yK3lbqhH1SZp7CpfIolnJw4udQk44ddPOn/3q6b+M6K8+/c2vF+jXVw29X/ALI7N+Z3jome+f/QZ7pOG6VCMtl9Dkk7hElifvd0uPs1cbs/SJ5/4+9OLw8ItQ2IaH//vvJ6Y7O0mIhmxuI/Np8klMIhdXuH0p50r1zVue+8fQ0GEQYeg/w32TrLHWF9OYDSO2gGbvYhJZfRodaFTZhYzpe4lWBxmGfzBnnDnYQPJRa+RjNHsXk8hF7iZSYl+IvPGefx0+BJIc/v2OudZoq2jQhhr1FRo+8U7kU6MoEVVjLROedujQn0GYfd99nznahlJn0oYxJetM453IpTE6rNgu5E0/fOlPIMzzf9zVY51q6mjURiTr8Zl3Ite5D0Vq7UQ+8jwtC5Ls7W00h9vgXo2oNpo+8U7kBjrPlDnfmdnwzz+APAf632NN93hn1oYaTdMn3om0USLVdiFje59+9hmQ5tmDg3YiQfe6c1bm287eiVTSUc555i0DB2lVkIQSSZ5pZl5B43d4J3KMk4hyvn3XOHjwtyDPwR3vtefrPj6LZ7595p3IaCeRMue7M+MHfvcbkOfXg04i7lP4WB6JlNgrhBsHzOVAGjMR68FI6rY3n0Sa7BXMRA7QqiDJgQEnkRp72Pkl4tzQhBv7f0mLgiS/oF0kSK8X5pPI8fYK4cbtPz8A8jxFu4h71/v/7CLb9j8F8uzXmEjffpBIYyIP7qM1QZT+99vz1ZFI7959IFC/vl1kKxIRabu+XQSJiPTTbdp2kfH3//gnIM/ePn2JbNmzF+R5sm+qPV8tiex+EuTZ06svkTt27wF5dm/VmMjju0GgB/Qlsvmxx0GgO7Xd9I6/7VFaE0S5T2Miux57FOTRmMitj/wI5Nl1j75ENu18BAS6W18iGx/eCQLdqi+RDTu+9zDIs2myPV8diawf3AECbdSXyDokItIGfYmsHXxoEORZry2RiT0DtCaIsk5jIv0DIFDPO+z5aklkez8ItGaiPV8diazpox//C6Is1beL3NJLP0IaRFmibRc5aemdd4E8W7t0JgISaUxkyZb7QaDF2hI58ev33gcC6UtkQtdmkOi8k+z56thFum4Dic450Z6vjkQWbwKJ5ulL5KvrN4JAGhM5d916EGiOxkR61vaAOGtnaEzkljUg0Aznf4HQkci8JUtBoOn6EpnbBRJ9WF8ic74GEk3Tl8iMxSDRh6z/+ExTIueBRFM17iLngkRT9e0iH50HEulMZC5INFlfItNngETOP6PRkUjDWbQkyOK8UaQlkWnTQSKdiZwFEiERYGhM5MxpIJHz6qqWRKaeCRIhEWA4bxRpSeSDIBISAYbGRN5NS4IsOhMBkTQmMhlEQiLAQCLAcF4605LIO08FifQlMm4iiKQxkQm0JMiicxeZAALpTOSUSSCRxkROPuVkEEhnIiCS8wI8EoGj0pdIuAFEQiLAoPHqSGQciETj1ZEIiIZEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgBG0h51fIk20BohWaw87v0RKaA0Qrcoedn6JlLs/xwYkq7aHnV8iKkiLgGQl9rANI55LIq9zEjGqaBEQLEDDNuJfpPE7vBP5OB1VTKuAYO7VatHMRTR+h3ci7ZSICtAyIFeTM2tDzbqYxu/wTmRFhA4L0TIgVvI8oypp+sQ7kVVROqwM9zTShWjUhrqApk+8E+mM02G4YJUuUE6TNiLX0PSJdyLuXa9hlONqRDb3oYhhxBbS8AmTyA3uxQi+TyNbrbsXGOpYmr2LSWRBjA40VB0tBgIFymjM5nlmOc3exSSSqEzVhUesYtW7D1atpyKZD874RFaeToealyNoRKgG95GIKft+hk8kcWxyGzHK0IhI9WmFFMUvp8EnsYmsbqGDTeW1tCgIEiim8Voi36a5p7CJJNqTNzXmLhSqp3VBiprUlao54FFfprGn8Iksmp061RhGKTYSUQLV6dM1Yt+hqafhE0lcFi+iBSyqCVckYrw1lHymamu+iWaezkciiWvSLkdMqqQqgPNN4QvUNmXsIOaFyEU08Qx+Ekl0t6TvIyZVWl1VEwwGA1CIgsGaulBJ5gZiirR10MAz+Eok8a1YVm8WBQUr66+8rbl9xEJ8JpJY1TpCIyCIOmMFzTqbz0QSnfObEYlgkdmradJH8JuIebJpjSASoVTswsz3VdP5TySxaEVrFJHIoyLxtktpxiPJIREzkmWV8ah5sUNrQ6ErUioypeLGrHeIsuSUiKnzuguOmRWPTYHCF4u3VrR1Lxj5PiYl10QsV1298HOfh4K3sPNKmqinfBKBVxUkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAgwkAp4Sif8BKbOKvRIFiXEAAAAASUVORK5CYII='
    green_pill64 = ''
    red_pill64 = ''
    button64 = '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'
    ShowMeTheButtons()


#Demo programs on github:
#https://github.com/PySimpleGUI/PySimpleGUI/tree/master/DemoPrograms
#
#https://github.com/PySimpleGUI/PySimpleGUI/blob/master/DemoPrograms/Demo_Buttons_Nice_Graphics.py


#----------------

"""
from PIL import Image, ImageTk
from urllib import request
import PySimpleGUI as sg

# Get one PNG file from website and save to file
url = (
    "https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/"
    "images/for_readme/Logo%20with%20text%20for%20GitHub%20Top.png")
headers = {
    'User-Agent': (
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '
        '(KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36')}
req = request.Request(url, headers=headers)
response = request.urlopen(req)
if response.status != 200:
    print("Failed to load image from website !")
    exit()
data = response.read()

filename = "example.png"
with open(filename, "wb") as f:
    f.write(data)

# Resize PNG file to size (300, 300)
size = (300, 300)
im = Image.open(filename)
im = im.resize(size, resample=Image.BICUBIC)

sg.theme('DarkGreen3')

layout = [
    [sg.Image(size=(300, 300), key='-IMAGE-')],
]
window = sg.Window('Window Title', layout, margins=(0, 0), finalize=True)

# Convert im to ImageTk.PhotoImage after window finalized
image = ImageTk.PhotoImage(image=im)

# update image in sg.Image
window['-IMAGE-'].update(data=image)

while True:

    event, values = window.read()
    if event == sg.WIN_CLOSED:
        break

window.close()
"""



#----------------

"""
# Required:
# pip install PySimpleGUI Pillow

# image_viewer.py
import io
import os
import PySimpleGUI as sg
from PIL import Image
file_types = [("JPEG (*.jpg)", "*.jpg"),
              ("All files (*.*)", "*.*")]
def main():
    layout = [
        [sg.Image(key="-IMAGE-")],
        [
            sg.Text("Image File"),
            sg.Input(size=(25, 1), key="-FILE-"),
            sg.FileBrowse(file_types=file_types),
            sg.Button("Load Image"),
        ],
    ]
    window = sg.Window("Image Viewer", layout)
    while True:
        event, values = window.read()
        if event == "Exit" or event == sg.WIN_CLOSED:
            break
        if event == "Load Image":
            filename = values["-FILE-"]
            if os.path.exists(filename):
                image = Image.open(values["-FILE-"])
                image.thumbnail((400, 400))
                bio = io.BytesIO()
                image.save(bio, format="PNG")
                window["-IMAGE-"].update(data=bio.getvalue())
    window.close()
if __name__ == "__main__":
    main()
"""


